<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机网络</title>
      <link href="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>计算机网络主要是由一些通用的，可编程的硬件互联而成的，而这些硬件并非专门用来实现某一特定目的（例如，传送数据或者视频信号）。这些可编程的硬件能够用来传送多种不同类型的数据，并能支持广泛的和日益增长的应用。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ol><li>交换方式：电路交换，分组交换，报文交换</li><li>使用者：公用网（因特网），专用网（军队，铁路，电力，银行）</li><li>传输介质：有线，无线</li><li>覆盖范围：广域网（WAN），城域网（MAN），局域网（LAN），个域网（PAN）、</li><li>拓朴结构：总线型，星型，环型，网状型</li></ol><h2 id="三种数据交换方式"><a href="#三种数据交换方式" class="headerlink" title="三种数据交换方式"></a>三种数据交换方式</h2><h3 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h3><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240911104744761.png" alt="image-20240911104744761"></p><p>计算机之间的数据传输是突发式的，当使用电路交换来传送计算机数据时，其线路的传输效率一般都会很低，线路上真正用来传送数据的时间往往不到10%甚至1%，因此计算机通讯通常采用分组交换。</p><h3 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h3><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240911110219727.png" alt="image-20240911110219727"></p><p>优点：</p><ol><li>没有建立连接和释放连接的过程</li><li>分组传输过程中逐段占用通信链路，有较高的通信线路利用率</li><li>交换节点可以为每一个分组独立选择转发路由，使得网络有很好的生存性</li></ol><p>缺点：</p><ol><li><p>分组首部带来了额外的传输开销</p></li><li><p>交换节点存储转发分组会造成一定的时延</p></li><li><p>无法确保通信时端到端通信资源全部可用，在通信量较大时可能造成网络拥塞</p></li><li><p>分组可能出现失序和丢失等问题</p><h3 id="报文交换"><a href="#报文交换" class="headerlink" title="报文交换"></a>报文交换</h3></li></ol><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240911110849426.png" alt="image-20240911110849426"></p><h3 id="三种交换方式的对比"><a href="#三种交换方式的对比" class="headerlink" title="三种交换方式的对比"></a>三种交换方式的对比</h3><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240911111044298.png" alt="image-20240911111044298"></p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240911111137639.png" alt="image-20240911111137639"></p><h2 id="计算机网络性能指标"><a href="#计算机网络性能指标" class="headerlink" title="计算机网络性能指标"></a>计算机网络性能指标</h2><pre><code>### 速率</code></pre><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240911112816478.png" alt="image-20240911112816478"></p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240911112921467.png" alt="image-20240911112921467"></p><p>1 MBps &#x2F; 8 &#x3D; 1 Mbps</p><h3 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h3><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240911113328040.png" alt="image-20240911113328040"></p><p>数据传输速率 &#x3D; min[主机接口速率， 线路带宽，交换机或路由器的接口速率]</p><h3 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h3><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240911114059245.png" alt="image-20240911114059245"></p><h3 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h3><p>时延是指数据从网络的一端传送到另一端所耗费的时间，也称为延迟或者迟延。数据可由一个或多个分组，甚至是一个比特构成</p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240911115038795.png" alt="image-20240911115038795"></p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240911115344939.png" alt="image-20240911115344939"></p><p>在不考虑排队时延和处理时延的情况<img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240911115502472.png" alt="image-20240911115502472"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo图片插入失败的解决方法</title>
      <link href="/2024/07/17/hexo%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2024/07/17/hexo%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>本人根据<a href="https://hexo.io/zh-cn/docs/asset-folders">hexo官方文档</a>来解决问题。</p><ol><li><p>在博客所在文件夹的目录中找到_config.yml,并将文件中的post_asset_folder选项设置为true来打开。</p><p><img src="/2024/07/17/hexo%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/Snipaste_2024-07-17_19-16-04.png"></p></li></ol><p>根据官方文档的介绍，在资源文件管理功能打开以后，hexo将会在每一次通过<em>hexo new title</em>命令创建新文章时自动创建一个与文章同名的文件夹，将所有与文章有关的资源都会被放在这个文件夹中，方便后续的管理。</p><ol start="2"><li><p>官方文档提供了两种方法，我这里采用了第二种方法，感兴趣的也可以去官方文档看看第一种方法。下载hexo-renderer-marked插件，这个可以直接在markdown中嵌入图片。</p><p>在博客文件夹下打开终端输入</p><p><code>npm install hexo-renderer-marked --save</code></p><p>如果速度很慢，导致无法下载的情况，可以选择配置路径为taobao的免费registry：</p><p><code>npm config set registry https://r*egistry.npm.taobao.org</code></p><p>配置后可通过下面方式来验证时候成功</p><p><code>npm config get registry</code>或者<code>npm info express</code></p><p>然后还是在_config.yml中修改：</p><p><img src="/2024/07/17/hexo%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/Snipaste_2024-07-17_20-14-17.png"></p><p>启用后，资源图片将会被自动解析为其对应文章的路径。 例如： <code>image.jpg</code> 位置为 <code>/2020/01/02/foo/image.jpg</code> ，这表示它是 <code>/2020/01/02/foo/</code> 文章的一张资源图片， <code>![](image.jpg)</code> 将会被解析为 <code>&lt;img src=&quot;/2020/01/02/foo/image.jpg&quot;&gt;</code> 。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git工作流</title>
      <link href="/2024/07/15/git%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
      <url>/2024/07/15/git%E5%B7%A5%E4%BD%9C%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="git工作流"><a href="#git工作流" class="headerlink" title="git工作流"></a>git工作流</h1><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p><img src="/2024/07/15/git%E5%B7%A5%E4%BD%9C%E6%B5%81/9F1E3D17081CF96E94899DEC388C8A98.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言学习笔记</title>
      <link href="/2024/06/24/c%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/06/24/c%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="流（stream）"><a href="#流（stream）" class="headerlink" title="流（stream）"></a>流（stream）</h1><h2 id="1-文件流"><a href="#1-文件流" class="headerlink" title="1. 文件流"></a>1. 文件流</h2><p>磁盘： 用于读取与写入在磁盘上的文件。</p><h2 id="2-标准I-O流"><a href="#2-标准I-O流" class="headerlink" title="2. 标准I&#x2F;O流"></a>2. 标准I&#x2F;O流</h2><ol><li>stdin：<br>默认连接到键盘，用于程序输入</li><li>stdout：</li></ol><p>​默认连接到控制台或者是屏幕，用于程序输出</p><ol start="3"><li><p>stderr：</p><p>默认也连接到控制台或者屏幕，专门输出错误信息和警告，使得其能够被区分开或者是重定向到不同的目的地</p></li></ol><h2 id="3-管道流"><a href="#3-管道流" class="headerlink" title="3. 管道流"></a>3. 管道流</h2><p>用于进程之间的通信（IPC），允许一个进程的输出成为另一个进程的输入  </p><p>popen();</p><h2 id="4-内存流"><a href="#4-内存流" class="headerlink" title="4.内存流"></a>4.内存流</h2><p>允许你将流与内存缓冲区关联，使得你可以向内存中读写数据，就像操作文件一样。POSIX -&gt; fmemopen</p><h2 id="5-网络流"><a href="#5-网络流" class="headerlink" title="5. 网络流"></a>5. 网络流</h2><p>套接字（Sockets）</p><h2 id="6-设备流"><a href="#6-设备流" class="headerlink" title="6. 设备流"></a>6. 设备流</h2><p>特殊文件或者是设备</p><p>例如：打印机</p><h1 id="内存管理机制"><a href="#内存管理机制" class="headerlink" title="内存管理机制"></a>内存管理机制</h1><p>a &gt; 分配机制</p><p>b &gt; 生命周期</p><p>c &gt; 访问速度</p><p>d &gt; 用途区分</p><h2 id="栈内存（Stack-Memeory）："><a href="#栈内存（Stack-Memeory）：" class="headerlink" title="栈内存（Stack Memeory）："></a>栈内存（Stack Memeory）：</h2><p>a. 自动管理机制: 函数调用时候，局部变量会被分配在栈上，当函数返回时候，局部变量全部销毁释放。</p><p>b. 速度快： 栈内存的分配和访问速度通常要比堆内存快，它是一种线性的数据结构</p><p>c. 大小有限制：栈的大小，在程序启动的那一刹那就意味着已经确定。如果栈的内存空间被耗尽，就意味着崩溃，栈溢出。</p><p>d.存储函数的局部变量，函数参数，函数调用的返回地址。</p><h2 id="堆内存（Heap-Memeory）"><a href="#堆内存（Heap-Memeory）" class="headerlink" title="堆内存（Heap Memeory）"></a>堆内存（Heap Memeory）</h2><p>a. 动态管理：malloc, calloc, realloc, free</p><p>b. 速度相较于栈有点慢：它需要在内存中寻找足够大的连续空间块。</p><p>c. 大小灵活：堆的大小通常受到可用系统内存的限制，而非栈本身的限制。它能够支持动态按需分配大量内存。</p><p>d.存储长期存在的大型数据结构</p>]]></content>
      
      
      
        <tags>
            
            <tag> 流（stream） </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构和算法学习笔记</title>
      <link href="/2024/04/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
      <url>/2024/04/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构和算法的定义"><a href="#数据结构和算法的定义" class="headerlink" title="数据结构和算法的定义"></a>数据结构和算法的定义</h1><h2 id="数据结构含义"><a href="#数据结构含义" class="headerlink" title="数据结构含义"></a>数据结构含义</h2><p>数据结构是计算机中存储，组织数据的方式。</p><p>有三个关键点：1. 数据 2. 存储 3. 组织(CRUD: 增删改查)</p><h2 id="算法含义"><a href="#算法含义" class="headerlink" title="算法含义"></a>算法含义</h2><p>为了更高效，科学，优等地进行组织</p><p><img src="/2024/04/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20240401175554593.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建博客</title>
      <link href="/2024/03/30/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/03/30/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="博客搭建过程"><a href="#博客搭建过程" class="headerlink" title="博客搭建过程"></a>博客搭建过程</h1><h2 id="安装前的准备"><a href="#安装前的准备" class="headerlink" title="安装前的准备"></a>安装前的准备</h2><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>以下所有的命令没有特别说明都可以在cmd或者powershell中运行，如果无法运行请使用管理员模式进行</p><h3 id="下载并安装node-js"><a href="#下载并安装node-js" class="headerlink" title="下载并安装node.js"></a>下载并安装node.js</h3><ul><li>官网下载:<a href="https://nodejs.org/en/download">https://nodejs.org/en/download</a></li><li>安装后l验证:<code>node -v</code></li></ul><h3 id="下载并安装git"><a href="#下载并安装git" class="headerlink" title="下载并安装git"></a>下载并安装git</h3><ul><li>官网下载:<a href="https://git-scm.com/download">https://git-scm.com/download</a></li><li>安装后验证:<code>git -v</code></li></ul><h3 id="命令行安装cnpm"><a href="#命令行安装cnpm" class="headerlink" title="命令行安装cnpm"></a>命令行安装cnpm</h3><ul><li>命令: <code>npm install -g cnpm --registry==https://registry.npm.taobao.org </code>(使用的淘宝源，速度快一点)</li><li>安装后验证：<code>cnpm -v</code></li></ul><h3 id="命令行安装hexo"><a href="#命令行安装hexo" class="headerlink" title="命令行安装hexo"></a>命令行安装hexo</h3><ul><li>命令：<code>cnpm install -g hexo-cli</code></li><li>安装后验证 : <code>hexo -v</code></li></ul><h1 id="配置github"><a href="#配置github" class="headerlink" title="配置github"></a>配置github</h1><h2 id="在github上创建仓库"><a href="#在github上创建仓库" class="headerlink" title="在github上创建仓库"></a>在github上创建仓库</h2><p><strong>创建</strong></p><ul><li><p>创建一个名为：[你的用户名].github.io的仓库(创建的时候中括号去掉)</p></li><li><p>例如：假如你的名字叫love，那么这个仓库应该叫love.github.io。创建之后，你就可以通过这个网站来访问你的博客。因此，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库</p><p><img src="/2024/03/30/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20240330183243122.png" alt="image-20240330183243122"></p></li></ul><p>（可见我这里已经无法再创建第二个了）</p><p><strong>其中选择public还是private其实都可以</strong></p><p><strong>仓库的名字必须是[username].github.io,其中username是你的用户名</strong></p><h1 id="配置SSH免密登录"><a href="#配置SSH免密登录" class="headerlink" title="配置SSH免密登录"></a>配置SSH免密登录</h1><p>为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，如果不配置你每次上传github都要输入你的密码，这太烦琐了，所以我们使用ssh key来解决本地和服务器链接问题。</p><p>操作步骤：</p><ol><li><p>打开文件资源管理器，找到c:\users\你的用户名\.ssh 文件夹并删除，如果没有找到那就直接下一步</p></li><li><p>命令行输入: <code>ssh-keygen -t rsa</code></p></li><li><p>然后连按回车键，知道提示已经生成</p></li><li><p>一般来说在创建的时候命令行会提示你密钥文件的路径，Windows一般是C:\Users\Administrator.ssh</p><p>然后用记事本打开id_rsa.pub文件并复制其中的内容备用。</p></li><li><p>打开你的github主页，进入settings ——&gt; SSH and GPG keys ,然后点击New SSH key新建一个，之后把先前复制的内容粘贴到里面，Title随便起一个。</p></li></ol><p>设置好之后如下图所示：</p><p><img src="/2024/03/30/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/Snipaste_2024-03-30_20-25-05-1721213237958-3.png"></p><h1 id="使用hexo搭建博客"><a href="#使用hexo搭建博客" class="headerlink" title="使用hexo搭建博客"></a>使用hexo搭建博客</h1><p><strong>终于进入正题了！</strong></p><h2 id="进行初始化"><a href="#进行初始化" class="headerlink" title="进行初始化"></a>进行初始化</h2><ol><li>在电脑的任意地方新建一个文件夹，名字随意，认识就行，比如我起的就是blog，这个文件夹还蛮重要的，不要随意乱放，要是实在不放心，可以和我一样将其设置为快速访问</li></ol><p><img src="/2024/03/30/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20240330203205949-1721213275794-6.png"></p><ol start="2"><li>在blog文件夹下右键打开powershell，输入<code>hexo init</code>初始化。使用之后，会自动下载许多文件。</li><li>执行<code>hexo g #生成</code>  </li><li>执行<code>hexo s #启动本地预览</code></li><li>然后打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> 即可看到内容</li></ol><p>这样，hexo的初始化设置就完成了，很简单，对吧。</p><h2 id="将博客部署到github个人主页上"><a href="#将博客部署到github个人主页上" class="headerlink" title="将博客部署到github个人主页上"></a>将博客部署到github个人主页上</h2><ol><li><p>在blog文件夹下右键打开powershell，执行安装命令<code>npm install hexo-deployer-git --save</code></p></li><li><p>打开在blog文件夹目录下的_config.yml文件，在文件的结尾加上如下的内容：</p><p><strong>注意：yaml文件的格式要求非常严格，注意在冒号后要加一个空格，否则会报错。同时，缩进不正确也会导致文件的报错，请务必检查文件的缩进</strong></p><p><img src="/2024/03/30/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20240330204031324-1721213311897-9.png"></p></li></ol><p>其中repository中的内容就是你的仓库地址，具体看下图：</p><p><img src="/2024/03/30/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/Snipaste_2024-03-30_20-42-20-1721213347685-14.png"></p><ol start="3"><li>在blog文件夹下右键打开powershell，执行<code>hexo d #将本地的blog推送到github仓库，期间可能有几分钟的延迟，请耐心等待捏</code></li><li>推送成功后，在浏览器输入对应的域名，即可访问你的博客啦！</li></ol><h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><h2 id="寻找主题"><a href="#寻找主题" class="headerlink" title="寻找主题"></a>寻找主题</h2><ul><li>默认的主题很丑对吧，那我们在写文章之前可以先来找一找好看的主题装饰一下我们的博客</li><li>可以进入hexo的官网：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a> 来找主题下载</li><li>这里我贴一下我使用的主题 <a href="https://github.com/jerryc127/hexo-theme-butterfly">butterfly</a></li></ul><h2 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h2><ul><li>在blog文件夹里执行：<code>git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</code>或者<code>git clone -b master https://gitee.com/immyw/hexo-theme-butterfly.git themes/butterfly</code>（如果第一个下的太慢了就用第二个）</li><li>可以进入blog文件夹下的themes文件夹来检查主题是否安装成功</li></ul><p><img src="/2024/03/30/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/Snipaste_2024-03-30_21-01-17-1721213379728-17.png"></p><h2 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h2><ul><li><p>打开blog文件夹下的_config.yml文件，在里面找到theme:landscape改为theme:butterfly(butterfly是我们使用的主题)</p><p><img src="/2024/03/30/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/Snipaste_2024-03-30_21-03-32.png"></p></li><li><p>然后分别在blog文件夹下执行1. <code>hexo clean #清理缓存，以免出现莫名其妙的问题</code>2.<code>hexo g </code>3. <code>hexo s </code>4.<code>hexo d #最好先用hexo s在本地预览，没问题后再推到仓库</code></p></li><li><p>此时输入网址应该就可以看到更改后的内容了</p></li></ul><h1 id="简单更改"><a href="#简单更改" class="headerlink" title="简单更改"></a>简单更改</h1><h2 id="基础修改"><a href="#基础修改" class="headerlink" title="基础修改"></a>基础修改</h2><ul><li><p>打开blog文件夹下的_config.yml</p></li><li><p>其中title指的是你的博客名字，author指的是作者名字</p></li><li><p>language中改成<code>zh-CN</code>就可以将网站改成中文了</p><p><img src="/2024/03/30/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/Snipaste_2024-03-30_21-09-06-1721213424016-23.png"></p></li></ul><h2 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h2><p>这里贴一下主题大佬关于主题配置的博客，完全可以按照大佬的攻略博客来美化你的博客:<a href="https://butterfly.js.org/posts/21cfbf15/">butterfly安装文档</a>，我就是按照大佬的博客来进行美化的。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这是本人搭建博客的过程，整个过程应该不会有太大的问题，如若遇到任何问题，请先去bing一下，寻找解决办法，如果没法解决，欢迎留言我们一起解决。最后，感谢你的阅读，谢谢捏！</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
