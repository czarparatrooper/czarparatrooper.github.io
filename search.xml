<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java多线程浅谈</title>
      <link href="/2024/11/29/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%B5%85%E8%B0%88/"/>
      <url>/2024/11/29/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%B5%85%E8%B0%88/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="多线程的概念"><a href="#多线程的概念" class="headerlink" title="多线程的概念"></a>多线程的概念</h2><p>多线程是一种用于实现并发执行的计算机编程技术，这允许单个程序创建和管理多个线程，以同时执行多个任务或执行块。</p><ul><li>并发：在同一时刻，有多个指令在单个CPU上交替执行</li><li>并行：在同一时刻，有多个指令在CPU上同时执行</li></ul><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><ul><li>新建（New）：创建后尚未启动的线程处于这个状态</li><li>就绪（Runnable）：调用start()方法后，线程进入就绪状态，此时线程只是开辟了内存空间，正在等待被线程调度器选中获得对CPU的使用权</li><li>运行（Running）：线程获得CPU权限进行执行</li><li>阻塞（Blocked）：线程因为某些原因放弃CPU使用权，暂时停止运行，直到线程进入就绪状态才有机会转到运行状态</li><li>死亡（Terminated）：线程执行结束或者因为异常退出的状态</li></ul><h2 id="多线程的实现方式"><a href="#多线程的实现方式" class="headerlink" title="多线程的实现方式"></a>多线程的实现方式</h2><ul><li>继承Thread类的方式进行实现<ul><li>自己定义一个类继承Thread</li><li>重写run方法</li><li>创建子类对象，并启动线程</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个类继承Thread</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//开启线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        创建MyThread对象</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="comment">//设置线程名字</span></span><br><span class="line">        t1.setName(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        <span class="comment">//可以合并写：</span></span><br><span class="line">        <span class="comment">//MyThread t1 = new MyThread(&quot;线程1&quot;)</span></span><br><span class="line">        <span class="comment">//开启线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现Runnable接口的方式进行实现<ul><li>自己定义一个类实现Runnable接口</li><li>重写run方法</li><li>创建自己定义的类的对象</li><li>创建一个Thread类的对象，并开启线程</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个类实现Runnable接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRun</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//获取到当前线程的对象</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">System.out.println(t.getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//开启线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建MyRun对象</span></span><br><span class="line">        <span class="type">MyRun</span> <span class="variable">mr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRun</span>();</span><br><span class="line">        <span class="comment">//创建线程对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr);</span><br><span class="line">        <span class="comment">//给线程设置名字</span></span><br><span class="line">        t1.setName(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        <span class="comment">//开启线程</span></span><br><span class="line">     t1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>利用Callable接口和Future接口方式实现<ul><li>特点：可以获取多线程运行的结果</li><li>自己定义一个类实现Callable接口</li><li>重写call（有返回值，表示多线程运行的结果）</li><li>创建自己定义的类的对象（表示多线程要执行的任务）</li><li>创建FutureTask的对象（管理多线程运行的结果）</li><li>创建Thread类的对象，并启动（表示线程）</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建MyCallable对象（表示多线程要执行的任务）</span></span><br><span class="line">        <span class="type">MyCallable</span> <span class="variable">mc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCallable</span>();</span><br><span class="line">        <span class="comment">//创建FutureTask对象（管理多线程运行的结果）</span></span><br><span class="line">        FutureTask&lt;Integer&gt; ft = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt; (mc);</span><br><span class="line">        <span class="comment">//创建线程的对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ft);</span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">       t1.start();</span><br><span class="line">        <span class="comment">//获取多线程运行的结果</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> ft.get();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三种实现方式的比较</p><table><thead><tr><th></th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>继承Thread类</td><td>编程比较简单，可以直接使用Thread类中的方法</td><td>可以扩展性较差，不能再继承其他类</td></tr><tr><td>实现Runnable接口</td><td>扩展性强，实现该接口的同时还可以继承其他的类</td><td>编程相对复杂，不能直接使用Thread类中的方法</td></tr><tr><td>实现Callable接口</td><td>扩展性强，实现该接口的同时还可以继承其他的类</td><td>编程相对复杂，不能直接使用Thread类中的方法</td></tr></tbody></table><h2 id="多线程中常用的成员方法"><a href="#多线程中常用的成员方法" class="headerlink" title="多线程中常用的成员方法"></a>多线程中常用的成员方法</h2><ul><li>返回此线程的名称</li></ul><p><code>String getName()</code></p><ul><li>设置线程的名字（构造方法也可以设置名字）</li></ul><p><code>void setName(String name)</code></p><ul><li>获取当前线程的对象</li></ul><p>当JVM虚拟机启动之后，会自动的启动多条线程，其中有一条线程就叫做main线程，它的作用就是去调用main方法，并执行里面的代码</p><p><code>static Thread currentThread()</code></p><ul><li>让线程休眠指定的时间，单位为毫秒</li></ul><p><code>static void sleep(long time)</code></p><ul><li>设置线程的优先级</li></ul><p>1 -&gt; 最小</p><p>10 -&gt; 最大</p><p>5 -&gt; 默认</p><p><code>setPriority(int newPriority)</code></p><ul><li>获取线程的优先级</li></ul><p><code>final int getPriority()</code></p><ul><li>设置守护线程</li></ul><p>当其他的非守护线程完毕之后，守护线程回陆续结束</p><p><code>final void setDaemon(boolean on)</code></p><ul><li>出让线程&#x2F;礼让线程</li></ul><p><code>public static void yield()</code></p><ul><li>插入线程&#x2F;插队线程</li></ul><p><code>public static void join()</code></p><h2 id="等待唤醒机制"><a href="#等待唤醒机制" class="headerlink" title="等待唤醒机制"></a>等待唤醒机制</h2><ul><li>当前线程等待，直到被其他线程唤醒</li></ul><p><code>void wait()</code></p><ul><li>随即唤醒单个线程</li></ul><p><code>void notify()</code></p><ul><li>唤醒所有线程</li></ul><p><code>void notifyAll()</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2024/11/28/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2024/11/28/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>正则表达式在搜索，替换，检查和解析字符串方面有着高效且简洁的优点</p><h2 id="基本概念和用法"><a href="#基本概念和用法" class="headerlink" title="基本概念和用法"></a>基本概念和用法</h2><ol><li>普通字符</li></ol><p>普通字符就是普通字符，例如，正则表达式abc会匹配包含“abc”的字符串</p><ol start="2"><li>特殊字符（元字符）</li></ol><ul><li><code>.</code>（点）：匹配任意单个字符（除了换行符）。</li><li><code>^</code>（脱字符号）：匹配输入字符串的开始位置。</li><li><code>$</code>（美元符号）：匹配输入字符串的结束位置。</li><li><code>[]</code>（方括号）：匹配方括号内的任意字符（字符集）。</li><li><code>|</code>（竖线）：匹配两项之间的任意一项（或）。</li><li><code>\</code>（反斜杠）：转义特殊字符或表示特殊序列。</li></ul><ol start="3"><li>字符类</li></ol><ul><li><code>[abc]</code>：匹配任何一个字符a、b或c。</li><li><code>[^abc]</code>：匹配除了a、b、c之外的任何字符。</li><li><code>[a-z]</code>：匹配任何一个小写字母。</li><li><code>[A-Z]</code>：匹配任何一个大写字母。</li><li><code>[0-9]</code>：匹配任何一个数字。</li></ul><ol start="4"><li>预定义字符类</li></ol><ul><li><code>\d</code>：匹配任何一个数字（等同于 <code>[0-9]</code>）。</li><li><code>\D</code>：匹配任何非数字字符（等同于 <code>[^0-9]</code>）。</li><li><code>\w</code>：匹配任何字母数字字符（等同于 <code>[a-zA-Z0-9_]</code>）。</li><li><code>\W</code>：匹配任何非字母数字字符（等同于 <code>[^a-zA-Z0-9_]</code>）。</li><li><code>\s</code>：匹配任何空白字符（空格、制表符、换行符等）。</li><li><code>\S</code>：匹配任何非空白字符。</li></ul><ol start="5"><li>量词</li></ol><ul><li><code>*</code>：零次或多次。</li><li><code>+</code>：一次或多次。</li><li><code>?</code>：零次或一次。</li><li><code>&#123;n&#125;</code>：确定的n次。</li><li><code>&#123;n,&#125;</code>：至少n次。</li><li><code>&#123;n,m&#125;</code>：最少n次且最多m次。</li></ul><ol start="6"><li>分组和捕获</li></ol><ul><li><code>(...)</code>：将多个表达式组合成一个子表达式，并捕获匹配的文本。</li></ul><p>注意事项:</p><p>​默认情况下，量词是贪婪的，它们会尽可能多地匹配字符。要使量词非贪婪（即尽可能少地匹配字符），可以在量词后面加上一个问号，例如 <code>*?</code>、<code>+?</code> 或 <code>&#123;n,&#125;?</code>。</p><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><ul><li>查找字符串中的所有数字：<code>\d+</code></li><li>查找字符串中的所有单词：<code>\w+</code></li><li>查找字符串中的所有电子邮件地址：<code>\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]&#123;2,&#125;\b</code></li><li>查找字符串中的所有URL：<code>(https?://\S+)</code></li></ul><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><ul><li><strong><code>String.replaceAll(String regex, String replacement)</code></strong><ul><li>替换所有匹配的子串。</li><li>示例：<code>&quot;Hello World!&quot;.replaceAll(&quot;[aeiou]&quot;, &quot;*&quot;)</code> 会返回 <code>&quot;H*ll* W*rld!&quot;</code>。</li></ul></li><li><strong><code>String.replaceFirst(String regex, String replacement)</code></strong><ul><li>只替换第一次匹配的子串。</li><li>示例：<code>&quot;Hello World!&quot;.replaceFirst(&quot;[aeiou]&quot;, &quot;*&quot;)</code> 会返回 <code>&quot;H*llo World!&quot;</code>。</li></ul></li><li><strong><code>String.matches(String regex)</code></strong><ul><li>检查整个字符串是否匹配正则表达式。</li><li>示例：<code>&quot;123&quot;.matches(&quot;\\d\\d\\d&quot;)</code> 返回 <code>true</code>。</li></ul></li><li><strong><code>String.find(String regex)</code></strong><ul><li>查找字符串中第一次出现的正则表达式匹配项。</li><li>示例：<code>&quot;Hello World&quot;.find(&quot;[aeiou]&quot;)</code> 返回第一个匹配的字符 <code>&quot;e&quot;</code>。</li></ul></li><li><strong><code>String.split(String regex)</code></strong><ul><li>根据正则表达式分割字符串。</li><li>示例：<code>&quot;one,two,three&quot;.split(&quot;,&quot;)</code> 返回数组 <code>[&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]</code>。</li></ul></li><li><strong><code>String.contains(String regex)</code></strong><ul><li>检查字符串是否包含正则表达式匹配的子串。</li><li>示例：<code>&quot;Hello World&quot;.contains(&quot;[aeiou]&quot;)</code> 返回 <code>true</code>。</li></ul></li><li><strong><code>Pattern.compile(String regex)</code></strong><ul><li>编译正则表达式，返回一个 <code>Pattern</code> 对象。</li><li>示例：<code>Pattern.compile(&quot;\\d\\d\\d&quot;)</code> 编译一个匹配三个数字的正则表达式。</li></ul></li><li><strong><code>Matcher.find()</code></strong><ul><li>在 <code>Matcher</code> 对象中查找下一个匹配项。</li><li>示例：使用 <code>Pattern</code> 和 <code>Matcher</code> 来查找和替换文本中的特定模式。</li></ul></li><li><strong><code>Matcher.group()</code></strong><ul><li>返回由 <code>Matcher</code> 对象的最后一次匹配操作所匹配的输入子序列。</li></ul></li></ul><p>后三个方法的例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 定义要匹配的字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;Hello World, 123 and 456&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 编译正则表达式，匹配一个或多个数字</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;\\d+&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建 Matcher 对象</span></span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(text);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 循环查找所有匹配项</span></span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            <span class="comment">// 获取匹配的子序列</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">matchedGroup</span> <span class="operator">=</span> matcher.group();</span><br><span class="line">            System.out.println(<span class="string">&quot;Found: &quot;</span> + matchedGroup);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速幂</title>
      <link href="/2024/11/26/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
      <url>/2024/11/26/%E5%BF%AB%E9%80%9F%E5%B9%82/</url>
      
        <content type="html"><![CDATA[<h1 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h1><p>为了高效地计算一个数的幂，在计算a^b^时候，可以将时间复杂度由O(b)降低至O(logb)</p><h3 id="快速幂算法的原理"><a href="#快速幂算法的原理" class="headerlink" title="快速幂算法的原理"></a>快速幂算法的原理</h3><p>快速幂算法的核心思想是利用指数的二进制展开和乘法的结合律。当我们计算 a^b^ 时，我们可以将指数 b分解为多个2的幂的和，例如：</p><p><img src="/2024/11/26/%E5%BF%AB%E9%80%9F%E5%B9%82/image-20241126174324998.png" alt="image-20241126174324998"></p><p>其中 b<del>i</del> 要么是0，要么是1（因为这是二进制表示）。因此，我们可以将 a^b^ 分解为：</p><p><img src="/2024/11/26/%E5%BF%AB%E9%80%9F%E5%B9%82/image-20241126174319351.png" alt="image-20241126174319351"></p><p><img src="/2024/11/26/%E5%BF%AB%E9%80%9F%E5%B9%82/image-20241126174331385.png" alt="image-20241126174331385"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">fastPower</span><span class="params">(<span class="type">long</span> a, <span class="type">long</span> b, <span class="type">long</span> modulus)</span> &#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">//1.将指数b转换为二进制表示</span></span><br><span class="line">    <span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//2.从b的最低位开始，对于每一位：</span></span><br><span class="line">    <span class="comment">//如果这一位是1，那么将当前的底数a乘到结果中</span></span><br><span class="line">    <span class="keyword">if</span> ((b &amp; <span class="number">1</span>) == <span class="number">1</span>) res = (res * a) % modulus;</span><br><span class="line">        <span class="comment">//将底数a自乘（a = a * a)</span></span><br><span class="line">    a = (a * a) % modulus;</span><br><span class="line">        <span class="comment">//继续处理下一位，直到处理完所有位</span></span><br><span class="line">    b &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 位运算 </tag>
            
            <tag> 快速幂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高精度计算</title>
      <link href="/2024/11/23/%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%AE%A1%E7%AE%97/"/>
      <url>/2024/11/23/%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="BIgInteger"><a href="#BIgInteger" class="headerlink" title="BIgInteger"></a>BIgInteger</h1><h2 id="BigInteger构造方法"><a href="#BigInteger构造方法" class="headerlink" title="BigInteger构造方法"></a>BigInteger构造方法</h2><p><strong>当BigInteger对象被创建，里面的数据不能发生改变，进行运算的时候会创建新的BigInteger对象记录</strong></p><ul><li>获取随机大整数，范围：[0 - 2^num-1^];</li></ul><p><code>public BigInteger(int num, Random rnd)</code></p><ul><li><strong>获取指定的大整数</strong></li></ul><p><code>public BigInteger(String val)</code></p><ul><li>获取指定进制的大整数</li></ul><p><em>例：当val &#x3D; 100 ，radix &#x3D; 10时，BigInteger表示的值是100</em></p><p>​<em>当val &#x3D; 100， radix &#x3D; 2时，BigInteger表示的值是4</em></p><p><em>注：字符串中的数字必须要和进制吻合，否则会报错</em></p><p><code>public BigInteger(String val, int radix)</code></p><ul><li><strong>静态方法获取Big Integer的对象，内部有优化</strong></li></ul><p><em>注：能表示的范围比较小，只能在long的取值范围之内，如果超出long的范围就不行了</em></p><p><em>在内部对-16到16进行了优化，提前把-16到16先创建好BigInteger的对象，如果多次获取并不会重新创建新的</em></p><p><code>public static BigInteger valueOf(long val)</code></p><h2 id="BigInteger常用方法"><a href="#BigInteger常用方法" class="headerlink" title="BigInteger常用方法"></a>BigInteger常用方法</h2><ul><li>加法</li></ul><p><code>BigInteger bi2 = bi1.add(BigInteger val)</code></p><ul><li>减法</li></ul><p><code>BigInteger bi2 = bi1.subtract(BigInteger val)</code></p><ul><li>乘法</li></ul><p><code>BigInteger bi2 = bi1.multiply(BigInteger val)</code></p><ul><li>除法，获取商</li></ul><p><code>BigInteger bi2 = bi1.divide(BigInteger val)</code></p><ul><li>取余</li></ul><p><code>BigInteger bi2 = bi1.mod(BigInteger val)</code></p><ul><li>除法，获取商和余数</li></ul><p><code>BigInteger[] bi = bi1.divideAndRemainder(BigInteger val)</code></p><ul><li>比较大小</li></ul><p><code>int res = bi1.compareTo(bi2)</code></p><p>res &#x3D;&#x3D; 0 -&gt; bi1 &#x3D;&#x3D; bi2</p><p>res &gt; 0 -&gt; bi1 &gt; bi2</p><p>res &lt; 0 -&gt; bi1 &lt; bi2</p><ul><li>比较是否相同</li></ul><p><code>boolean res = bi1.equals(bi2)</code></p><ul><li>次幂</li></ul><p><code>BigInteger bi2 = bi1.pow(int exponent)</code></p><ul><li>返回较大值&#x2F;较小值</li></ul><p><code>BigInteger bi2 = bi1.max(BigInteger val)</code></p><ul><li>转为int类型整数(long,float,double)，超出范围数据有误</li></ul><p><code>int res = bi1.intValue()</code></p><h1 id="BIgDecimal"><a href="#BIgDecimal" class="headerlink" title="BIgDecimal"></a>BIgDecimal</h1><h2 id="BigDecimal构造方法"><a href="#BigDecimal构造方法" class="headerlink" title="BigDecimal构造方法"></a>BigDecimal构造方法</h2><p>性质与BigInteger类似</p><ul><li>构造方法获取BigDecimal对象</li></ul><p><strong>通过传递double类型的小数来创建对象的方式有可能是不精确的，不推荐使用</strong></p><p><code>public BigDecimal(double val)</code></p><p><code>public BigDecimal(String val)</code></p><ul><li>静态方法获取BigDecimal对象</li></ul><p><code>public static BigDecimal valueOf(double val)</code></p><h2 id="BigDecimal常用方法"><a href="#BigDecimal常用方法" class="headerlink" title="BigDecimal常用方法"></a>BigDecimal常用方法</h2><p>基本和BigInteger类似，不再赘述</p><p>这里主要看除法</p><p><code>public BigDecimal divide(BigDecimal val, int scale, RoundingMode roundingMode)</code></p><p>RoundingMode 枚举值与对应的整数常量</p><ul><li>RoundingMode.UP          -&gt; 0</li></ul><p><em>远离零方向舍入。如果舍弃部分大于 0，则对结果进行上舍入。</em></p><p><em>5.5 -&gt; 6, -5.5 -&gt; -5</em></p><ul><li>RoundingMode.DOWN        -&gt; 1</li></ul><p><em>向零方向舍入。如果舍弃部分大于 0，则不对结果进行舍入。</em></p><p><em>5.5 -&gt; 5, -5.5 -&gt; -5</em></p><ul><li>RoundingMode.CEILING     -&gt; 2</li></ul><p><em>向正无穷方向舍入。如果结果为正，则相当于 <code>ROUND_UP</code>；如果结果为负，则相当于 <code>ROUND_DOWN</code>。</em></p><p><em>5.5 -&gt; 6, -5.5 -&gt; -5</em></p><ul><li>RoundingMode.FLOOR       -&gt; 3</li></ul><p><em>向负无穷方向舍入。如果结果为正，则相当于 <code>ROUND_DOWN</code>；如果结果为负，则相当于 <code>ROUND_UP</code>。</em></p><p><em>5.5 -&gt; 5, -5.5 -&gt; -6</em></p><ul><li>RoundingMode.HALF_UP     -&gt; 4</li></ul><p><em>“四舍五入”。如果舍弃部分大于等于 0.5，则向上舍入；否则向下舍入。</em></p><p><em>5.5 -&gt; 6, 2.5 -&gt; 3, -5.5 -&gt; -6, -2.5 -&gt; -2</em></p><ul><li>RoundingMode.HALF_DOWN   -&gt; 5</li></ul><p><em>如果舍弃部分小于 0.5，则向下舍入；如果舍弃部分大于等于 0.5，则向上舍入。</em></p><p><em>5.5 -&gt; 5, 2.5 -&gt; 2, -5.5 -&gt; -5, -2.5 -&gt; -3</em></p><ul><li>RoundingMode.HALF_EVEN   -&gt; 6 银行家舍入</li></ul><p><em>如果舍弃部分小于 0.5，则向下舍入；如果舍弃部分大于 0.5，则向上舍入；如果舍弃部分正好等于 0.5，则查看保留位前一位的奇偶性，如果是偶数，则向下舍入，如果是奇数，则向上舍入。这种舍入模式减少了累积误差。</em></p><p><em>5.5 -&gt; 6 (因为 6 是偶数), 2.5 -&gt; 2 (因为 2 是偶数), 1.5 -&gt; 2 (因为 2 是偶数), -5.5 -&gt; -6 (因为 6 是偶数), -2.5 -&gt; -2 (因为 2 是偶数), -1.5 -&gt; -2 (因为 2 是偶数)</em></p><ul><li>RoundingMode.UNNECESSARY -&gt; 7 不进行舍入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">bd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;2.5&quot;</span>);</span><br><span class="line"><span class="comment">//这里表示setScale 方法将 BigDecimal 的值舍入到 0 位小数，并使用 HALF_UP 舍入模式，即四舍五入</span></span><br><span class="line">bd = bd.setScale(<span class="number">0</span>, RoundingMode.HALF_UP);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> BigInteger </tag>
            
            <tag> BigDecimal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java双列集合学习</title>
      <link href="/2024/11/13/java%E5%8F%8C%E5%88%97%E9%9B%86%E5%90%88%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/11/13/java%E5%8F%8C%E5%88%97%E9%9B%86%E5%90%88%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><h2 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h2><ol><li>双列集合一次要存储一对数据，分别为键和值</li><li>键不能重复，值可以重复</li><li>键和值是一一对应的，每一个键只能找到自己对应的值</li><li>键＋值的整体，称之为“键值对”或者“键值对对象”，在java中叫做“Entry对象”</li></ol><h2 id="Map方法"><a href="#Map方法" class="headerlink" title="Map方法"></a>Map方法</h2><ul><li>创建Map集合的对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;T, T&gt; m = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt; ();</span><br></pre></td></tr></table></figure><ul><li>添加元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;T, T&gt; m = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt; ();</span><br><span class="line"><span class="comment">//put方法添加时候会有两种操作：添加/覆盖</span></span><br><span class="line"><span class="comment">//在添加数据的时候，如果键不存在，那么直接把键值对对象添加到map集合当中，方法返回null</span></span><br><span class="line"><span class="comment">//在添加数据的时候，如果键存在，那么会把原有的键值对对象覆盖，方法返回被覆盖的值</span></span><br><span class="line">m.put(t1, t2);</span><br></pre></td></tr></table></figure><ul><li>移除所有元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m.clear();</span><br></pre></td></tr></table></figure><ul><li>判断是否包含指定的键</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m.containsKey(t1);</span><br></pre></td></tr></table></figure><ul><li>判断是否包含指定的值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m.containsKey(t2);</span><br></pre></td></tr></table></figure><ul><li>判断集合是否为空</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m.isEmpty();</span><br></pre></td></tr></table></figure><ul><li>集合的长度，键值对的个数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m.size();</span><br></pre></td></tr></table></figure><h2 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h2><h3 id="键找值"><a href="#键找值" class="headerlink" title="键找值"></a>键找值</h3><p>将键找出来单独放到单列集合中，通过遍历键来得到值</p><ul><li>迭代器遍历</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;T, T&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt; ();</span><br><span class="line">Set&lt;T&gt; keys = map.keySet();</span><br><span class="line">Iterator&lt;T&gt; iterator = keys.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    <span class="type">T</span> <span class="variable">key</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">    <span class="type">T</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>增强for遍历</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;T, T&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt; ();</span><br><span class="line">Set&lt;T&gt; keys = map.keySet();</span><br><span class="line"><span class="keyword">for</span> (T key : keys) &#123;</span><br><span class="line"><span class="type">T</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>lambda表达式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;T, T&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt; ();</span><br><span class="line">Set&lt;T&gt; keys = map.keySet();</span><br><span class="line">keys.forEach(key -&gt; &#123;</span><br><span class="line">     <span class="type">T</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">     System.out.println(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="键值对"><a href="#键值对" class="headerlink" title="键值对"></a>键值对</h3><ul><li>迭代器遍历</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;T, T&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt; ();</span><br><span class="line">Set&lt;Map.Entry&lt;T, T&gt;&gt; entries = map.entrySet();</span><br><span class="line">Iterator&lt;Map.Entry&lt;T, T&gt;&gt; iterator = entries.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    Map.Entry&lt;T,T&gt; entry = iterator.next();</span><br><span class="line">    <span class="type">T</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">    <span class="type">T</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>增强for遍历</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;T, T&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt; ();</span><br><span class="line">Set&lt;Map.Entry&lt;T, T&gt;&gt; entries = map.entrySet();</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;T, T&gt; entry : entries) &#123;</span><br><span class="line"><span class="type">T</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line"><span class="type">T</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>lambda表达式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;T, T&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt; ();</span><br><span class="line">Set&lt;Map.Entry&lt;T, T&gt;&gt; entries = map.entrySet();</span><br><span class="line">entries.forEach(entry -&gt; &#123;</span><br><span class="line">    <span class="type">T</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">    <span class="type">T</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;T, T&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt; ();</span><br><span class="line">map.forEach((T key, T value) -&gt; &#123;</span><br><span class="line">    System.out.println(key + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><ul><li>HashMap底层是哈希表结构</li><li>依赖hashCode方法和equals方法保证键的唯一</li><li>如果键存储的是自定义对象，需要重写hashCode和equals方法，如果值是自定义对象，则不需要</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 双列集合 </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滑动窗口</title>
      <link href="/2024/11/12/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
      <url>/2024/11/12/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>KMP</title>
      <link href="/2024/11/12/KMP/"/>
      <url>/2024/11/12/KMP/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// s[]是长文本，p[]是模式串，n是s的长度，m是p的长度</span></span><br><span class="line">求模式串的Next数组：</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= m; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (j &amp;&amp; p[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">    <span class="keyword">if</span> (p[i] == p[j + <span class="number">1</span>]) j ++ ;</span><br><span class="line">    ne[i] = j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (j &amp;&amp; s[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">    <span class="keyword">if</span> (s[i] == p[j + <span class="number">1</span>]) j ++ ;</span><br><span class="line">    <span class="keyword">if</span> (j == m)</span><br><span class="line">    &#123;</span><br><span class="line">        j = ne[j];</span><br><span class="line">        <span class="comment">// 匹配成功后的逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组模拟栈和队列</title>
      <link href="/2024/11/12/%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
      <url>/2024/11/12/%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="数组模拟栈"><a href="#数组模拟栈" class="headerlink" title="数组模拟栈"></a>数组模拟栈</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stack</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">10010</span>;</span><br><span class="line">    <span class="type">int</span>[] stk = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="type">int</span> tt;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//插入</span></span><br><span class="line">    stk[++tt] = x;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//弹出</span></span><br><span class="line">    tt --;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断栈是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (tt &gt; <span class="number">0</span>) notempty;</span><br><span class="line">    <span class="keyword">else</span> isempty;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//栈顶</span></span><br><span class="line">    stk[tt];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><p>常见模型：找出每个数左边离它最近的比它大&#x2F;小的数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">tt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">while</span> (tt &amp;&amp; check(stk[tt], i)) tt--;</span><br><span class="line">stk[++tt] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组模拟队列"><a href="#数组模拟队列" class="headerlink" title="数组模拟队列"></a>数组模拟队列</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">10010</span>;</span><br><span class="line">    <span class="type">int</span>[] q = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="type">int</span> <span class="variable">tt</span> <span class="operator">=</span> -<span class="number">1</span>, hh;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//插入</span></span><br><span class="line">    q[++tt] = x;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//弹出</span></span><br><span class="line">    hh ++;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断队列是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (hh &lt;= tt) notempty;</span><br><span class="line">    <span class="keyword">else</span> isempty;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//取出队头元素</span></span><br><span class="line">    q[hh];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h2><p>常见模型：找出滑动窗口中的最大值&#x2F;最小值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">hh</span> <span class="operator">=</span> <span class="number">0</span>, tt = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; check_out(q[hh])) hh ++ ;  <span class="comment">// 判断队头是否滑出窗口</span></span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; check(q[tt], i)) tt -- ;</span><br><span class="line">    q[ ++ tt] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 栈 </tag>
            
            <tag> 数组 </tag>
            
            <tag> 单调栈 </tag>
            
            <tag> 单调队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组模拟链表</title>
      <link href="/2024/11/12/%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E9%93%BE%E8%A1%A8/"/>
      <url>/2024/11/12/%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="用数组模拟单链表"><a href="#用数组模拟单链表" class="headerlink" title="用数组模拟单链表"></a>用数组模拟单链表</h2><p>模拟最多的：邻接表（作用：存储图和树）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">10010</span>;</span><br><span class="line">    <span class="comment">//head 表示头节点的下标</span></span><br><span class="line">    <span class="comment">//idx 存储当前已经用到了那个点</span></span><br><span class="line">    <span class="comment">//e[i] 表示节点i的值</span></span><br><span class="line">    <span class="comment">//ne[i] 表示节点i的next指针是多少</span></span><br><span class="line"><span class="type">int</span> head, idx;</span><br><span class="line">    <span class="type">int</span>[] e = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="type">int</span>[] ne = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        head = -<span class="number">1</span>;</span><br><span class="line">        idx = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将x插入到头节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add_to_head</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        e[idx] = x, ne[idx] = head, head = idx++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将x插入到下标为k的点后面</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">        e[idx] = x, ne[idx] = ne[k], ne[k] = idx++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将下标为k的点后面删除</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> k)</span> &#123;</span><br><span class="line">        ne[k] = ne[ne[k]];</span><br><span class="line">        <span class="comment">//注意判断当k为头节点时的情况</span></span><br><span class="line">        <span class="keyword">if</span> (!k) head = ne[head];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用数组模拟双链表"><a href="#用数组模拟双链表" class="headerlink" title="用数组模拟双链表"></a>用数组模拟双链表</h2><p>模拟最多的：优化一些问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">10010</span>;</span><br><span class="line">    <span class="comment">//idx 存储当前已经用到了那个点</span></span><br><span class="line">    <span class="comment">//e[i] 表示节点i的值</span></span><br><span class="line">    <span class="comment">//l[i] 表示节点i的左边</span></span><br><span class="line">    <span class="comment">//r[i] 表示节点i的右边</span></span><br><span class="line"><span class="type">int</span>idx;</span><br><span class="line">    <span class="type">int</span>[] e = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="type">int</span>[] l = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="type">int</span>[] r = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//0表示左端点，1表示右端点</span></span><br><span class="line">        r[<span class="number">0</span>] = <span class="number">1</span>, l[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        idx = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将x插入到下标为k的点后面</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">        e[idx] = x;</span><br><span class="line">        r[idx] = r[k];</span><br><span class="line">        l[idx] = k;</span><br><span class="line">        l[r[k]] = idx;</span><br><span class="line">        r[k] = idx;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将下标为k的点删除</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> k)</span> &#123;</span><br><span class="line">r[l[k]] = r[k]</span><br><span class="line">        l[r[k]] = l[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 链表 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树浅谈</title>
      <link href="/2024/11/12/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%B5%85%E8%B0%88/"/>
      <url>/2024/11/12/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%B5%85%E8%B0%88/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><p>二叉树：在二叉树中，任意节点的度&lt;&#x3D;2</p><p>二叉树分类：</p><ul><li>二叉查找树</li><li>平衡二叉树</li><li>红黑树</li></ul><h2 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h2><ol><li>每一个节点上最多有两个子节点</li><li>任意节点左子树上的值都小于当前节点</li><li>任意节点右子树上的值都大于当前节点</li></ol><p>小的存左边，大的存右边，一样的不存</p><p>遍历方式：</p><ol><li><strong>前</strong>序遍历：<strong>当前节点</strong>，左子节点，右子节点</li><li><strong>中</strong>序遍历：左子节点，<strong>当前节点</strong>，右子节点</li><li><strong>后</strong>序遍历：左子节点，右子节点，<strong>当前节点</strong></li><li>层序遍历：一层一层地去遍历</li></ol><h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><p>任意节点左右字数高度差不超过1</p><h3 id="旋转机制"><a href="#旋转机制" class="headerlink" title="旋转机制"></a>旋转机制</h3><ul><li>左左 -&gt; 右旋</li><li>左右 -&gt; 局部左旋再右旋</li><li>右右 -&gt; 左旋</li><li>右左 -&gt; 局部右旋再左旋</li></ul><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><p>添加节点的规则：</p><ol><li>每一个节点是红色或黑色</li><li>根节点必须是黑色</li><li>叶节点（Nil）是黑色</li><li>两个红色节点不能相连</li><li>任意节点到所有后代叶节点的简单路径上，黑色节点数量相同</li></ol><p>节点添加规律：</p><p><strong>默认添加的节点是红色的</strong></p><ul><li>根</li></ul><p>​直接变成黑色</p><ul><li><p>非根</p><ul><li><p>父黑</p><p>不需要任何操作</p></li><li><p>父红</p><ul><li>叔叔红<ul><li>将父节点设置为黑，叔叔节点设置为黑</li><li>祖父节点设置为红</li><li>如果祖父节点是根，再变回红</li><li>如果祖父节点非根，再将祖父节点设置为当前节点判断</li></ul></li><li>叔叔黑，当前节点为父的右子节点<ul><li>把父节点作为当前节点并左旋，再进行判断</li></ul></li><li>叔叔黑，当前节点为父的左子节点<ul><li>将父节点设置为黑</li><li>将祖父节点设置为红</li><li>以祖父节点为支点右旋</li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java单列集合学习</title>
      <link href="/2024/11/10/java%E5%8D%95%E5%88%97%E9%9B%86%E5%90%88%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/11/10/java%E5%8D%95%E5%88%97%E9%9B%86%E5%90%88%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<ul><li>List接口的实现类<ul><li>ArrayList：动态数组实现，允许重复元素</li><li>LinkedList：双向链表实现，允许重复元素</li></ul></li><li>Set接口的实现类<ul><li>HashSet：基于哈希表实现，不允许重复元素</li><li>LinkedHashSet：基于哈希表和链表实现，不允许重复元素，保持插入顺序</li><li>TreeSet：基于红黑树实现，不允许重复元素，元素自动排序</li></ul></li></ul><h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h1><p>Collection是单列集合的祖宗接口，它的功能是全部单列集合都可以继承使用的</p><h2 id="collection方法"><a href="#collection方法" class="headerlink" title="collection方法"></a>collection方法</h2><ul><li>把给定的对象添加到当前集合中</li></ul><p><strong>1. 如果我们向List系列集合中添加数据，那么方法永远会返回true，因为List系列是允许元素重复</strong></p><p><strong>2.如果我们向Set系列集合中添加数据，那么方法会根据是否存在而返回true或false，因为Set系列是不允许元素重复的</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;E&gt; coll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt; ();</span><br><span class="line">coll.add(e);</span><br></pre></td></tr></table></figure><ul><li>清空集合中所有的元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;E&gt; coll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt; ();</span><br><span class="line">coll.add(e);</span><br><span class="line">coll.clear();</span><br></pre></td></tr></table></figure><ul><li>把给定的对象在当前集合中删除</li></ul><p><strong>1.这个方法会返回一个布尔类型的值，当要删除的元素不存在，就会返回false</strong></p><p><strong>2. 因为Collection里面定义的是List和Set共性的方法，所以不能通过索引进行删除，只能通过元素的对象进行删除</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;E&gt; coll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt; ();</span><br><span class="line">coll.add(e);</span><br><span class="line">coll.remove(e);</span><br></pre></td></tr></table></figure><ul><li>判断当前集合中是否包含给定的对象</li></ul><p><strong>在源码中contains方法是依赖equals方法进行判断是否存在，因此如果集合中存储的是自定义对象，在JavaBean中一定要重写equals方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;E&gt; coll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt; ();</span><br><span class="line">coll.add(e);</span><br><span class="line">coll.contains(e);</span><br></pre></td></tr></table></figure><ul><li>判断当前集合是否为空</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;E&gt; coll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt; ();</span><br><span class="line">coll.isEmpty();</span><br></pre></td></tr></table></figure><ul><li>返回集合元素中个数&#x2F;集合的长度</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;E&gt; coll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt; ();</span><br><span class="line">coll.size();</span><br></pre></td></tr></table></figure><ul><li>打乱集合中的元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;E&gt; coll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt; ();</span><br><span class="line">Collections.shuffle(coll);</span><br></pre></td></tr></table></figure><ul><li>获取集合中的最大值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;E&gt; coll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt; ();</span><br><span class="line">Collections.max(coll);</span><br></pre></td></tr></table></figure><h2 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h2><h3 id="迭代器遍历"><a href="#迭代器遍历" class="headerlink" title="迭代器遍历"></a>迭代器遍历</h3><p><strong>1.迭代器在遍历集合的时候不依赖索引</strong></p><p><strong>2. 迭代器遍历完毕，指针不会复位，如果还要进行遍历，则需要重新获取一个迭代器对象</strong></p><p><strong>3. 一个循环中只能使用一次next方法，不然可能会报NoSuchElementException错误</strong></p><p><strong>4. 迭代器在遍历的时候，不能用集合的方法进行增加和删除，但是可以用迭代器提供的remove方法进行删除</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;String&gt; collection = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        collection.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line"><span class="comment">// 获取集合的迭代器对象，用于遍历集合中的所有元素</span></span><br><span class="line">        Iterator&lt;String&gt; iterator = collection.iterator();</span><br><span class="line"><span class="comment">//hasNext():判断当前位置是否有元素</span></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="comment">//next（）：获取当前位置的元素，并将迭代器对象移向下一个位置</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">element</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;bbb&quot;</span>.equals(element)) &#123;</span><br><span class="line">                <span class="comment">//用迭代器提供的remove进行删除</span></span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(element);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="增强for遍历"><a href="#增强for遍历" class="headerlink" title="增强for遍历"></a>增强for遍历</h3><p><strong>增强for的底层就是迭代器，为了简化迭代器的代码而存在的</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;E&gt; collection = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (E e : collection)&#123;</span><br><span class="line">        <span class="comment">//这里的e相当于是定义了一个变量e，然后将collection的值赋给了e，所以当修改e的变量时，并不会修改原本的数据</span></span><br><span class="line">System.out.println(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h3><p>lambda表达式允许以简洁的语法编写匿名内部类。Lambda表达式主要用于实现单个抽象方法的接口，这种接口被称为函数式接口（Functional Interface），这是一个只有一个抽象方法的接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;E&gt; collection = <span class="keyword">new</span> <span class="title class_">Collection</span>&lt;&gt; ();</span><br><span class="line"><span class="comment">//利用匿名内部类的形式</span></span><br><span class="line">collection.forEach(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;E&gt;()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(E e)</span> &#123;</span><br><span class="line">System.out.println(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//用lambda表达式简化</span></span><br><span class="line">collection.forEach(e -&gt; System.out.println(e));</span><br></pre></td></tr></table></figure><h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><h2 id="List集合特有方法"><a href="#List集合特有方法" class="headerlink" title="List集合特有方法"></a>List集合特有方法</h2><ul><li>在集合的指定位置插入指定的元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;E&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt; ();</span><br><span class="line">list.add(e1);</span><br><span class="line"><span class="comment">//在集合的指定位置插入指定的元素</span></span><br><span class="line">list.add(<span class="number">1</span>,e1);</span><br></pre></td></tr></table></figure><ul><li>删除指定索引处的元素，返回被删除的元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;E&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt; ();</span><br><span class="line">list.add(e);</span><br><span class="line"><span class="comment">//删除指定索引处的元素，返回被删除的元素</span></span><br><span class="line"><span class="type">E</span> <span class="variable">res</span> <span class="operator">=</span> list.remove(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt; ();</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//此时删除的是索引1处的元素，而不是大小等于1的元素</span></span><br><span class="line"><span class="comment">//因为在调用方法的时候，如果方法出现了重载现象，会优先调用实参和形参类型一致的那个方法</span></span><br><span class="line"><span class="comment">//这里的1的是基本数据类型int，所以调用了删除索引处元素的remove方法</span></span><br><span class="line">list.remove(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//如果要删除大小等于1的元素，可以参照如下</span></span><br><span class="line">list.remove(Integer.valueOf(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><ul><li>修改指定索引处的元素，返回被修改的元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;E&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt; ();</span><br><span class="line">list.add(e);</span><br><span class="line"><span class="comment">//修改指定索引处的元素，返回被修改的元素</span></span><br><span class="line"><span class="type">E</span> <span class="variable">res</span> <span class="operator">=</span> list.set(<span class="number">0</span>,i);</span><br></pre></td></tr></table></figure><ul><li>返回指定索引处的元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;E&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt; ();</span><br><span class="line">list.add(e);</span><br><span class="line"><span class="comment">//返回指定索引处的元素</span></span><br><span class="line"><span class="type">E</span> <span class="variable">res</span> <span class="operator">=</span> list.get(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="遍历方法-1"><a href="#遍历方法-1" class="headerlink" title="遍历方法"></a>遍历方法</h3><ol><li>迭代器遍历</li><li>增强for循环</li><li>lambda表达式</li><li>普通for循环</li><li><strong>列表迭代器(可以在遍历过程中添加，修改元素)</strong></li></ol><p>列表迭代器还可以反向遍历集合，用<code>hasPrevious() 和 previous()</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;E&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt; ();</span><br><span class="line">ListIterator&lt;E&gt; it = list.listIterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line"><span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> it.next();</span><br><span class="line"><span class="keyword">if</span> (i.equals(e)) &#123;</span><br><span class="line">        <span class="comment">//调用迭代器中的方法添加元素</span></span><br><span class="line">it.add(i);</span><br><span class="line">        <span class="comment">//调用迭代器中的方法修改元素</span></span><br><span class="line">        it.set(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>ArrayList集合原理：</p><ol><li>利用空参创建的集合，在底层创建一个默认长度为0的数组</li><li>添加第一个元素时，底层会创建一个新的长度为10的数组</li><li>当数组存满时，会扩容1.5倍</li><li>如果一次添加多个元素，1.5倍还放不下，则创建数组的长度和实际需要的长度一致</li></ol><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><p>LinkedList的底层数据类型是双链表，因此有很多首尾操作的特有API</p><ul><li><p>在列表开头插入特定的元素<code>public void addFirst(E e)</code></p></li><li><p>将指定的元素追加到列表的末尾 <code>public void addLast(E e)</code></p></li><li><p>返回列表中的第一个元素 <code>public E getFirst()</code></p></li><li><p>返回列表中的最后一个元素 <code>pubic E getLast()</code></p></li><li><p>在列表中删除并返回第一个元素 <code>public E removeFirst()</code></p></li><li><p>在列表中删除并返回最后一个元素 <code>public E removeLast()</code></p></li></ul><h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><p>哈希值：</p><ul><li>根据hashCode方法算出来的int类型的整数</li><li>所有对象都有哈希值，默认使用的地址值进行计算</li><li>一般来说，会重写hashCode方法，利用对象内部的属性值计算哈希值</li><li>在小部分情况下，不同属性值或者不同地址值计算出来的哈希值可能一样（哈希碰撞）</li></ul><p>HashSet底层原理：</p><ol><li>创建一个默认长度16，默认加载因为0.75的数组，数组名为table</li><li>根据元素的哈希值跟数组的长度计算出应存入的位置</li><li>判断当前位置是否为null，如果是null直接存入</li><li>如果位置不为null，表示有元素，则调用equals方法比较属性值</li><li>一样：不存；不一样：存入数组，形成链表，新元素直接挂在老元素下面（JDK8以前新老元素位置相反）</li></ol><h2 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h2><p>LinkedHashSet底层原理：底层数据结构依然是哈希表，只是每个元素又额外多了一个双链表的机制记录存储的顺序，因此有序（存储和取出的元素顺序一致）</p><h2 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h2><p>TreeSet的底层原理：这是基于红黑树的数据结构实现排序的，增删改查性能都较好</p><p>Treeset集合默认的排序规则：</p><ul><li>对于数值类型：Integer，Double，默认按照从小到大的顺序进行排序</li><li>对于字符，字符串类型：按照字符在ASCII码表中的数字升序进行排序</li></ul><p>两种更改排序的方法：</p><ol><li>自然排序：Javabean类实现Comparable接口指定比较规则</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> clss T <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;T&gt; &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        <span class="comment">//this：表示当前要添加的元素</span></span><br><span class="line">        <span class="comment">//t:表示已经在红黑树存在的元素</span></span><br><span class="line">        <span class="comment">//返回值：</span></span><br><span class="line">        <span class="comment">//负数：认为要添加的元素是小的，存左边</span></span><br><span class="line">        <span class="comment">//正数：认为要添加的元素是大的，存右边</span></span><br><span class="line">        <span class="comment">//0：认为要添加的元素已经存在，舍弃</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.getId() - t.getId();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>比较器排序：创建TreeSet对象时候，传递比较器Comparator指定规则</li></ol><p><em>使用原则：默认使用第一种，如果第一种不能满足当前要求，才使用第二种</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">TreeSet&lt;String&gt; ts = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;String&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String o1, String o2)</span> &#123;</span><br><span class="line"> <span class="comment">//定义比较规则</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> o1.length() - o2.length();</span><br><span class="line">i = i == <span class="number">0</span> ? o1.compareTo(o2) : i;</span><br><span class="line">        <span class="comment">//返回值规则和自然排序一样</span></span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//lambda表达式改写</span></span><br><span class="line">    TreeSet&lt;String&gt; ts = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;((o1,o2) -&gt; &#123;</span><br><span class="line">        <span class="comment">//定义比较规则</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> o1.length() - o2.length();</span><br><span class="line">i = i == <span class="number">0</span> ? o1.compareTo(o2) : i;</span><br><span class="line">        <span class="comment">//返回值规则和自然排序一样</span></span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ol><li><strong>想要集合中元素可重复</strong></li></ol><p>ArrayList集合，基于数组的</p><ol start="2"><li><strong>想要集合中元素去重</strong></li></ol><p>HashSet集合，基于哈希表的</p><ol start="3"><li>想要集合中元素可重复，而且当前<strong>增删操作明显多于查询</strong></li></ol><p>LinkedList集合，基于链表的</p><ol start="4"><li>想要集合中元素去重，并且保证存取顺序</li></ol><p>LinkedHashSet集合，基于哈希表和双链表，效率低于HashSet</p><ol start="5"><li>想要集合中元素进行排序</li></ol><p>TreeSet集合，基于红黑树，后续也可以用List集合实现排序</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Collection </tag>
            
            <tag> 迭代器 </tag>
            
            <tag> 链表 </tag>
            
            <tag> lambda </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java中泛型浅淡</title>
      <link href="/2024/11/10/java%E4%B8%AD%E6%B3%9B%E5%9E%8B%E6%B5%85%E6%B7%A1/"/>
      <url>/2024/11/10/java%E4%B8%AD%E6%B3%9B%E5%9E%8B%E6%B5%85%E6%B7%A1/</url>
      
        <content type="html"><![CDATA[<p>Java中的泛型（Generics）是一种支持泛型编程的工具，它允许程序员在编译时提供类型信息，从而提高代码的复用性和安全性。泛型的应用统一了数据类型，把运行时期的问题提前到了编译期间，避免了强制类型转换可能出现的异常，应为在编译阶段类型就能确定下来。</p><h1 id="泛型中的细节"><a href="#泛型中的细节" class="headerlink" title="泛型中的细节"></a>泛型中的细节</h1><ul><li>泛型中不能写基本数据类型(int,float,double,boolean,byte,char,short,long)</li><li>指定泛型的具体类型后，传递数据时，可以传入该类型和他的子类类型</li><li>如果不写泛型，类型默认是Object</li></ul><h1 id="泛型的种类"><a href="#泛型的种类" class="headerlink" title="泛型的种类"></a>泛型的种类</h1><ol><li>泛型类：</li></ol><p>允许你定义一个类，该类可以操作任意类型的数据，而不需要在代码中使用具体的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Box</span>&lt;T&gt; &#123;</span><br><span class="line"><span class="keyword">private</span> T t;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T t)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.t = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>泛型接口：</li></ol><p>允许你定义一个接口，该接口可以操作任意类型的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Generate</span>&lt;T&gt; &#123;</span><br><span class="line">T <span class="title function_">next</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>泛型方法：</li></ol><p>允许你在方法级别指定泛型类型，而不是在类级别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(T[] array)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (T element : array) &#123;</span><br><span class="line">System.out.println(element);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>泛型数组：</li></ol><p>Java不允许直接创建泛型数组，但是可以通过数组实例化来间接创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer[] intArray = (Integer[]) <span class="keyword">new</span> <span class="title class_">Number</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><h1 id="泛型的继承和通配符"><a href="#泛型的继承和通配符" class="headerlink" title="泛型的继承和通配符"></a>泛型的继承和通配符</h1><ul><li>泛型不具备继承性，但是数据具有继承性</li></ul><p>假设我们有一个<code>List&lt;Person&gt;</code>,但我们不能将他赋值给<code>List&lt;Child&gt;</code>类型，即便Child继承了Person。这是因为<code>List&lt;Person&gt;</code>和<code>List&lt;Child&gt;</code>是两个不同的泛型类型，并且在泛型系统中不具备继承关系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Parent&gt; parents = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">List&lt;Child&gt; children = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">parents = children; <span class="comment">// 错误：编译不通过</span></span><br></pre></td></tr></table></figure><p>即便泛型类型不支持直接的继承关系，泛型中实际的元素依然可以通过父类来引用。这依赖于对象的继承关系，而不是泛型类型的继承关系。假设你有一个<code>List&lt;Parent&gt;</code>和一个<code>List&lt;Child&gt;</code>，虽然它们的类型不具备继承性，但你可以将<code>Child</code>对象当作<code>Parent</code>来处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Parent&gt; parentList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">parentList.add(<span class="keyword">new</span> <span class="title class_">Parent</span>());</span><br><span class="line">parentList.add(<span class="keyword">new</span> <span class="title class_">Child</span>());  <span class="comment">// 因为 Child 是 Parent 的子类，数据具有继承性</span></span><br></pre></td></tr></table></figure><p><strong>协变与泛型的关系</strong></p><p>在一些编程语言（如 C# 和 Kotlin）中，协变（Covariance）概念部分缓解了这个限制。它允许在泛型接口或类的某些上下文中，使<code>List&lt;Child&gt;</code>可以被视为<code>List&lt;Parent&gt;</code>。不过，Java 并不允许泛型的协变和逆变直接应用于容器类型，但可以通过通配符（Wildcard）如<code>List&lt;? extends Parent&gt;</code>来实现一定的协变效果。</p><ul><li><p>泛型的通配符：允许我们指定一个类型可以是任意类型或者任意类型的子类型</p><ul><li>?</li><li>? extends E</li><li>? super E</li></ul></li></ul><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ul><li>定义类，方法，接口的时候，如果类型不能确定，就可以定义泛型</li><li>如果类型不确定，但是能知道是哪个继承体系中的，可以使用泛型的通配符</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 泛型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RPC框架</title>
      <link href="/2024/11/07/RPC%E6%A1%86%E6%9E%B6/"/>
      <url>/2024/11/07/RPC%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> RPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区间合并</title>
      <link href="/2024/10/23/%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/"/>
      <url>/2024/10/23/%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="区间合并"><a href="#区间合并" class="headerlink" title="区间合并"></a>区间合并</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[][] merge(<span class="type">int</span>[][] a) &#123;  </span><br><span class="line">   <span class="keyword">if</span> (a == <span class="literal">null</span> || a.length == <span class="number">0</span> || a[<span class="number">0</span>].length == <span class="number">0</span>) &#123;  </span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>][<span class="number">2</span>];  </span><br><span class="line">   &#125;  </span><br><span class="line">   Arrays.sort(a, Comparator.comparingInt(item -&gt; item[<span class="number">0</span>]));  </span><br><span class="line">   List&lt;<span class="type">int</span>[]&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span>[] arr : a) &#123;  </span><br><span class="line">      <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> arr[<span class="number">0</span>];  </span><br><span class="line">      <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> arr[<span class="number">1</span>];  </span><br><span class="line">      <span class="keyword">if</span> (res.size() == <span class="number">0</span> || res.get(res.size() - <span class="number">1</span>)[<span class="number">1</span>] &lt; left) &#123;  </span><br><span class="line">         res.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;left, right&#125;);  </span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">         <span class="type">int</span> <span class="variable">newRight</span> <span class="operator">=</span> Math.max(res.get(res.size() - <span class="number">1</span>)[<span class="number">1</span>], left);  </span><br><span class="line">         res.set(res.size() - <span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;res.get(res.size() - <span class="number">1</span>)[<span class="number">0</span>], newRight&#125;);  </span><br><span class="line">      &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="keyword">return</span> res.toArray(<span class="keyword">new</span> <span class="title class_">int</span>[res.size()][<span class="number">2</span>]);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 区间合并 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离散化</title>
      <link href="/2024/10/23/%E7%A6%BB%E6%95%A3%E5%8C%96/"/>
      <url>/2024/10/23/%E7%A6%BB%E6%95%A3%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 去重 + 排序  </span></span><br><span class="line">List&lt;Integer&gt; distinctSorterAlls = alls.stream().distinct().sorted().collect(Collectors.toList());  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 离散化映射，把离散化的下标映射到连续的数组下标 + 1for (int[] item : add) &#123;  </span></span><br><span class="line">   <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Collections.binarySearch(distinctSorterAlls, item[<span class="number">0</span>]) + <span class="number">1</span>;  </span><br><span class="line">   a[index] += item[<span class="number">1</span>];  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 前缀和  </span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; distinctSorterAlls.size(); i++) &#123;  </span><br><span class="line">   s[i + <span class="number">1</span>] = s[i] + a[i];  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 离散化映射，把离散化的下标映射到连续的数组下标 + 1for (int[] item : query) &#123;  </span></span><br><span class="line">   <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> Collections.binarySearch(distinctSorterAlls, item[<span class="number">0</span>]) + <span class="number">1</span>;  </span><br><span class="line">   <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> Collections.binarySearch(distinctSorterAlls, item[<span class="number">1</span>]) + <span class="number">1</span>;  </span><br><span class="line">   System.out.println(s[r + <span class="number">1</span>] - s[l]);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 前缀和 </tag>
            
            <tag> 离散化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位运算</title>
      <link href="/2024/10/22/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
      <url>/2024/10/22/%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eg: n的二进制表示中第k位是几</span><br><span class="line">1. 先把第k位移到最后一位  n&gt;&gt;k</span><br><span class="line">2. 看个位是几  x&amp;1</span><br><span class="line"></span><br><span class="line">1 + 2 =&gt; 求n的第k位数字: n &gt;&gt; k &amp; 1</span><br></pre></td></tr></table></figure><p>返回n的最后一位：lowbit(n) &#x3D; n &amp; -n<img src="/2024/10/22/%E4%BD%8D%E8%BF%90%E7%AE%97/image-20241022212805257.png" alt="image-20241022212805257"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双指针算法</title>
      <link href="/2024/10/22/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/"/>
      <url>/2024/10/22/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="双指针算法"><a href="#双指针算法" class="headerlink" title="双指针算法"></a>双指针算法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; i &amp;&amp; check(i, j)) j ++ ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 具体问题的逻辑</span></span><br><span class="line">&#125;</span><br><span class="line">常见问题分类：</span><br><span class="line">    (<span class="number">1</span>) 对于一个序列，用两个指针维护一段区间</span><br><span class="line">    (<span class="number">2</span>) 对于两个序列，维护某种次序，比如归并排序中合并两个有序序列的操作</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 双指针算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抓包初体验</title>
      <link href="/2024/10/21/%E6%8A%93%E5%8C%85%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>/2024/10/21/%E6%8A%93%E5%8C%85%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="Wireshark过滤规则"><a href="#Wireshark过滤规则" class="headerlink" title="Wireshark过滤规则"></a>Wireshark过滤规则</h1><h2 id="按ip地址过滤"><a href="#按ip地址过滤" class="headerlink" title="按ip地址过滤"></a>按ip地址过滤</h2><h3 id="想看源ip为xx的包"><a href="#想看源ip为xx的包" class="headerlink" title="想看源ip为xx的包"></a>想看源ip为xx的包</h3><p>过滤条件中输入：<code>ip.src==源ip地址</code></p><p>自己电脑的ip地址查询：<code>ipconfig /all</code></p><h3 id="想看目标ip为xx的包"><a href="#想看目标ip为xx的包" class="headerlink" title="想看目标ip为xx的包"></a>想看目标ip为xx的包</h3><p>过滤条件中输入：<code>ip.dst==目标ip地址</code></p><h3 id="想看源或目标ip为xx的包"><a href="#想看源或目标ip为xx的包" class="headerlink" title="想看源或目标ip为xx的包"></a>想看源或目标ip为xx的包</h3><p>过滤条件中输入：<code>ip.addr==ip地址</code></p><h2 id="按MAC地址过滤"><a href="#按MAC地址过滤" class="headerlink" title="按MAC地址过滤"></a>按MAC地址过滤</h2><h3 id="想看源MAC为xx的包"><a href="#想看源MAC为xx的包" class="headerlink" title="想看源MAC为xx的包"></a>想看源MAC为xx的包</h3><p>过滤条件中输入：<code>eth.src==源MAC地址</code></p><p>自己电脑的MAC地址查询：<code>ipconfig /all</code></p><h3 id="想看目标MAC为XX的包"><a href="#想看目标MAC为XX的包" class="headerlink" title="想看目标MAC为XX的包"></a>想看目标MAC为XX的包</h3><p>过滤条件中输入：<code>eth.dst==目标MAC地址</code></p><h3 id="想看源或目标MAC为xx的包"><a href="#想看源或目标MAC为xx的包" class="headerlink" title="想看源或目标MAC为xx的包"></a>想看源或目标MAC为xx的包</h3><p>过滤条件中输入：<code>eth.addr==MAC地址</code></p><h2 id="按端口号过滤"><a href="#按端口号过滤" class="headerlink" title="按端口号过滤"></a>按端口号过滤</h2><p>端口号：表示一台计算机中的特定进程所提供的服务，用来区分相同计算机所提供的不同服务</p><p>按照端口号分类：</p><ol><li><strong>公认端口：0~1023</strong>。它们紧密绑定于一些服务，通常这些端口的通讯明确表明了某种服务的协议，如：80端口对应与HTTP通信，21端口绑定与FTP服务，22端口绑定与ssh服务，25端口绑定于SMTP服务，135端口绑定与RPC（远程过程调用）服务。</li><li><strong>注册端口：1024~49151</strong>。它们松散的绑定于一些服务，也就是说有许多服务绑定于这些端口，这些端口同样用于其他许多目的，如：许多系统处理端口从1024开始</li><li><strong>动态或私有端口：49152~65535。</strong>理论上，不应为服务分配这些端口，通常机器从1024开始分配动态端口。例外：SUN的RPC端口从32768开始。</li></ol><p>按照协议类型分类：可分为TCP端口，UDP端口，IP端口，ICMP</p><ol><li><strong>TCP端口：</strong>即传输控制协议端口，需要在客户端和服务器之间建立连接，这样可以提供可靠的数据传输。常见的包括FTP的21端口，Telnet的23端口，SMTP的25端口，HTTP的80端口。</li><li><strong>UDP端口：</strong>即用户数据报协议端口，无需在客户端和服务器端建立连接，安全性得不到保障。常见的DNS的53端口，SNMP（简单网络管理协议）的161端口，QQ使用的8000和4000端口。</li><li><strong>保留端口：</strong>UNIX有保留端口号的概念，只有超级用户特权的进程才允许给它自己分配一个保留端口号。这些端口号介于1~1023之间，一些应用程序将它作为客户与服务器认证的一部分。</li></ol><p>端口使用的一些注意事项</p><ol><li>不要使用端口号小于1024的端口。</li><li>端口号一般习惯为4位整数，在同一台计算机上端口号不能重复，否则，会产生端口号冲突</li><li>客户端端口号因存在时间很短暂又称临时端口号，大多数TCP&#x2F;IP实现给临时端口号分配1024—5000之间的端口号。大于5000的端口号是为其他服务器预留的 。</li></ol><h3 id="过滤tcp端口为xx的包"><a href="#过滤tcp端口为xx的包" class="headerlink" title="过滤tcp端口为xx的包"></a>过滤tcp端口为xx的包</h3><p><code>tcp.port==端口</code></p><p>仅想过滤源端口为xx时：<code>tcp.srcport==源端口</code></p><p>仅想过滤目标端口为xx时：<code>tcp.dstport==源端口</code></p><h3 id="过滤udp端口为xx的包"><a href="#过滤udp端口为xx的包" class="headerlink" title="过滤udp端口为xx的包"></a>过滤udp端口为xx的包</h3><p><code>udp.port==端口</code></p><p>仅想过滤源端口为xx时：<code>udp.srcport==源端口</code></p><p>仅想过滤目标端口为xx时：<code>udp.dstport==源端口</code></p><h2 id="按协议类型过滤"><a href="#按协议类型过滤" class="headerlink" title="按协议类型过滤"></a>按协议类型过滤</h2><p>直接输入对应协议的名称即可</p><p>eg:<code>arp dhcp https</code></p><h2 id="规则组合"><a href="#规则组合" class="headerlink" title="规则组合"></a>规则组合</h2><p>和<code>and</code>:</p><p>eg: 想看dhcp包，并且只想看某台电脑的dhcp包 ：<code>dhcp and eth.addr==MAC地址</code></p><p>或<code>or</code>:</p><p>eg: 想看dhcp包或者arp包：<code>dhcp and arp</code></p><p>非<code>!</code>:</p><p>eg: 想看除了arp以外的包：<code>!arp</code> </p>]]></content>
      
      
      
        <tags>
            
            <tag> 抓包 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前缀和</title>
      <link href="/2024/10/18/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
      <url>/2024/10/18/%E5%89%8D%E7%BC%80%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h1><h2 id="一维前缀和"><a href="#一维前缀和" class="headerlink" title="一维前缀和"></a>一维前缀和</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">S[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">S[i] = a[<span class="number">0</span>] + a[<span class="number">1</span>] + a[<span class="number">2</span>] + ... + a[i - <span class="number">1</span>]</span><br><span class="line">S[i + <span class="number">1</span>] = S[i] + a[i]</span><br><span class="line">a[l] + ... + a[r] = S[r + <span class="number">1</span>] - S[l]</span><br><span class="line"></span><br><span class="line"><span class="comment">//原地前缀和</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">    nums[i] += nums[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">S[i, j] = 二维数组a[i,j]第i行j列格子左上部分所有元素的和</span><br><span class="line">S[i, j] = S[i - <span class="number">1</span>, j] + S[i, j - <span class="number">1</span>] - S[i - <span class="number">1</span>, j - <span class="number">1</span>] + a[i, j]</span><br><span class="line">以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵的和为：</span><br><span class="line">S[x2, y2] - S[x1 - <span class="number">1</span>, y2] - S[x2, y1 - <span class="number">1</span>] + S[x1 - <span class="number">1</span>, y1 - <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h1 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h1><h2 id="一维差分"><a href="#一维差分" class="headerlink" title="一维差分"></a>一维差分</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给区间[l, r]中的每个数加上c：B[l] += c, B[r + <span class="number">1</span>] -= c</span><br></pre></td></tr></table></figure><h2 id="二维差分"><a href="#二维差分" class="headerlink" title="二维差分"></a>二维差分</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">给以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵中的所有元素加上c：</span><br><span class="line">S[x1, y1] += c, S[x2 + <span class="number">1</span>, y1] -= c, S[x1, y2 + <span class="number">1</span>] -= c, S[x2 + <span class="number">1</span>, y2 + <span class="number">1</span>] += c</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 前缀和 </tag>
            
            <tag> 差分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分</title>
      <link href="/2024/10/17/%E4%BA%8C%E5%88%86/"/>
      <url>/2024/10/17/%E4%BA%8C%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h1 id="整数二分"><a href="#整数二分" class="headerlink" title="整数二分"></a>整数二分</h1><p>要根据题目确定边界的等号是否取到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//check是根据题目定的一个判断方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">bsearch_1</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//&gt;&gt;&gt;表示无符号运算</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + r &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(mid)) r = mid;    <span class="comment">// check()判断mid是否满足性质</span></span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">bsearch_2</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//总之，具体问题具体分析</span></span><br></pre></td></tr></table></figure><h1 id="浮点数二分"><a href="#浮点数二分" class="headerlink" title="浮点数二分"></a>浮点数二分</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//check是根据题目定的一个判断方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">bsearch3</span><span class="params">(<span class="type">double</span> l, <span class="type">double</span> r)</span> &#123;</span><br><span class="line">    <span class="comment">//eps表示精度，取决于题目对精度的要求</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">double</span> <span class="variable">eps</span> <span class="operator">=</span> <span class="number">1e-6</span>;</span><br><span class="line">    <span class="keyword">while</span> (r - l &gt; eps) &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">mid</span> <span class="operator">=</span> l + (r - l) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快排和归并浅析</title>
      <link href="/2024/10/16/%E5%BF%AB%E6%8E%92%E5%92%8C%E5%BD%92%E5%B9%B6%E6%B5%85%E6%9E%90/"/>
      <url>/2024/10/16/%E5%BF%AB%E6%8E%92%E5%92%8C%E5%BD%92%E5%B9%B6%E6%B5%85%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="快速排序法"><a href="#快速排序法" class="headerlink" title="快速排序法"></a>快速排序法</h1><ul><li>确定分界点：一般为数组最左边，最右边或者中间的元素</li><li>调整范围：左段的所有数应该都小于分界点的数，右段的数应该都大于分界点的数</li></ul><p>设置两个指针，一个指向数组最左边，一个指向数组最右边。左指针向右移动，直到遇到不小于分界点的数，进而右指针向左移动，直到遇到不大于分界点的数，然后将左右指针指向的数进行交换。交换后，左指针继续向右移动，循环上面的过程，直到左右两指针相遇，此时左右两段应该已经被分好。</p><ul><li>递归处理左右两段</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line"><span class="comment">//当左指针大于等于右指针时返回</span></span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//设置分界点，左右指针</span></span><br><span class="line"><span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> arr[l], i = l - <span class="number">1</span>, j = r + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="comment">//判断左段</span></span><br><span class="line"><span class="keyword">while</span> (arr[++i] &lt; pos) &#123;&#125;</span><br><span class="line">        <span class="comment">//判断右段</span></span><br><span class="line">        <span class="keyword">while</span> (arr[--j] &gt; pos) &#123;&#125;</span><br><span class="line">        <span class="comment">//交换左右指针对应的值</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            arr[i] = arr[j];</span><br><span class="line">            arr[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//递归处理</span></span><br><span class="line">quickSort(arr, l, j);</span><br><span class="line">    quickSort(arr, j+<span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="归并排序法"><a href="#归并排序法" class="headerlink" title="归并排序法"></a>归并排序法</h1><ul><li>确定分界点：分界点为数组的中间元素，<code>mid = (l + r)/2</code></li><li>递归排序左右两段</li><li>归并 —— 合二为一：将两个排好序的数组合并成一个排好序的数组</li></ul><p>新建一个等大的数组，原数组的左段和右段逐一对比，哪个更小就放进新数组，直到左段到分界点或右段到数组末尾，此时将剩下的部分全部放进新数组，此时新数组中的元素应该已经排序好了。最后将新数组的数组传给原数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span> <span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span>[] arr2, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="comment">//当左指针大于右指针的时返回</span></span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//设置分界点，为数组的中间</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//递归排序左右两段</span></span><br><span class="line">    mergeSort(arr, arr2, l, mid);</span><br><span class="line">    mergeSort(arr, arr2, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="comment">//设置左右指针，新数组的索引</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l, k = <span class="number">0</span>, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//将两个排好序的数组合并成一个数组</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; arr[j]) arr2[k++] = arr[i++];</span><br><span class="line">        <span class="keyword">else</span> arr2[k++] = arr[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当其中一段放置好时，另一段的剩余部分直接全部放进新数组即可</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) arr2[k++] = arr[i++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) arr2[k++] = arr[j++];</span><br><span class="line">    <span class="comment">//将排好序的值传给原数组</span></span><br><span class="line">    <span class="keyword">for</span>(i = l, k = <span class="number">0</span>; i &lt;= r; i++, k++) arr[i] = arr2[k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 双指针算法 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell</title>
      <link href="/2024/09/28/shell/"/>
      <url>/2024/09/28/shell/</url>
      
        <content type="html"><![CDATA[<p><code>man chmod</code> 是一个用于查看 <code>chmod</code> 命令手册页的指令。让我为您解释一下这个命令的主要内容：</p><ol><li><p>命令用途：<br><code>chmod</code> 用于更改文件或目录的权限。</p></li><li><p>基本语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod [选项] 模式 文件...</span><br></pre></td></tr></table></figure></li><li><p>权限表示方法：</p><ul><li>符号模式：使用字母和符号（如 u+x, g-w, o&#x3D;r 等）</li><li>八进制模式：使用数字（如 755, 644 等）</li></ul></li><li><p>符号模式说明：</p><ul><li><p>u：用户&#x2F;所有者</p></li><li><p>g：组</p></li><li><p>o：其他</p></li><li><p>a：所有</p></li><li><p>+：添加权限</p></li><li><p>-：移除权限</p></li><li><p>&#x3D;：设置精确的权限</p></li><li><p>r：读取权限</p></li><li><p>w：写入权限</p></li><li><p>x：执行权限</p></li></ul></li><li><p>八进制模式说明：</p><ul><li>4：读取权限</li><li>2：写入权限</li><li>1：执行权限</li></ul><p>例如：755 表示 rwxr-xr-x</p></li><li><p>常用选项：</p><ul><li>-R：递归地更改目录及其内容的权限</li><li>-v：显示权限更改的详细信息</li></ul></li><li><p>示例：</p><ul><li><code>chmod u+x file</code>：给文件所有者添加执行权限</li><li><code>chmod 755 file</code>：设置权限为 rwxr-xr-x</li><li><code>chmod -R g+w directory</code>：递归地给目录及其内容添加组写入权限</li></ul></li><li><p>注意事项：</p><ul><li>只有文件所有者或超级用户可以更改文件权限</li><li>更改权限可能会影响文件的安全性和可访问性</li></ul></li><li><p>相关命令：</p><ul><li>chown：更改文件所有者</li><li>chgrp：更改文件所属组</li></ul></li></ol><p>这个指令是在解释为什么直接运行 <code>./semester</code> 不成功，而使用 <code>sh semester</code> 却可以成功执行脚本。让我为您详细解释：</p><ol><li><p>命令解释：<br><code>sh semester</code> 的意思是显式地使用 <code>sh</code> 解释器来运行 <code>semester</code> 文件。</p></li><li><p>为什么这样可以工作：</p><ul><li>当您使用 <code>sh semester</code> 时，您实际上是在运行 <code>sh</code> 程序，并将 <code>semester</code> 文件作为参数传递给它。</li><li><code>sh</code> 是一个shell解释器，它会读取并执行 <code>semester</code> 文件中的内容，而不需要 <code>semester</code> 文件本身具有执行权限。</li></ul></li><li><p>为什么 <code>./semester</code> 不工作：</p><ul><li><code>./semester</code> 尝试直接执行 <code>semester</code> 文件。</li><li>这要求 <code>semester</code> 文件本身必须有执行权限。</li><li>如果文件没有执行权限，系统会拒绝执行它，即使文件内容是有效的shell脚本。</li></ul></li><li><p>关键区别：</p><ul><li><code>sh semester</code> 不需要 <code>semester</code> 文件有执行权限，因为 <code>sh</code> 只是将其作为文本文件读取。</li><li><code>./semester</code> 需要文件有执行权限，因为它试图将文件本身作为程序运行。</li></ul></li><li><p>安全性考虑：</p><ul><li>需要执行权限的机制（如 <code>./semester</code>）提供了一层额外的安全保护，防止意外执行不应该执行的文件。</li></ul></li><li><p>实际应用：</p><ul><li>在脚本开发过程中，使用 <code>sh semester</code> 可以方便地测试脚本，即使还没有设置正确的权限。</li><li>但在正式使用时，通常应该给脚本适当的权限，并使用 <code>./semester</code> 方式执行。</li></ul></li></ol><p>总结：<code>sh semester</code> 工作是因为它使用了 <code>sh</code> 解释器来读取和执行文件内容，而不是尝试直接执行文件本身。这绕过了文件权限的限制，但也失去了通过文件权限提供的一些安全保护。</p><p>使用 <code>man touch</code> 命令查看 <code>touch</code> 程序的手册后，你会看到以下内容：</p><h3 id="touch-命令的用法"><a href="#touch-命令的用法" class="headerlink" title="touch 命令的用法"></a><code>touch</code> 命令的用法</h3><p><code>touch</code> 命令用于创建新的空文件或更新现有文件的时间戳。</p><h4 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch [选项] 文件名</span><br></pre></td></tr></table></figure><h4 id="常用选项："><a href="#常用选项：" class="headerlink" title="常用选项："></a>常用选项：</h4><ul><li><code>-a</code>：仅修改访问时间。</li><li><code>-m</code>：仅修改修改时间。</li><li><code>-c</code>：如果文件不存在，不创建新文件。</li><li><code>-d</code>：使用指定的日期和时间设置文件的时间戳，例如 <code>-d &quot;2024-01-01 12:00&quot;</code>。</li><li><code>-t</code>：使用指定的时间戳格式设置时间，例如 <code>-t 202401011200</code>。</li></ul><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><ol><li>创建一个新文件：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch newfile.txt</span><br></pre></td></tr></table></figure></li><li>更新现有文件的时间戳：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch existingfile.txt</span><br></pre></td></tr></table></figure></li><li>仅更新访问时间：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch -a existingfile.txt</span><br></pre></td></tr></table></figure></li></ol><p>这就是 <code>touch</code> 命令的基本用法。如果你需要更详细的内容或特定功能的说明，可以告诉我！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络概述"><a href="#计算机网络概述" class="headerlink" title="计算机网络概述"></a>计算机网络概述</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>计算机网络主要是由一些通用的，可编程的硬件互联而成的，而这些硬件并非专门用来实现某一特定目的（例如，传送数据或者视频信号）。这些可编程的硬件能够用来传送多种不同类型的数据，并能支持广泛的和日益增长的应用。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ol><li>交换方式：电路交换，分组交换，报文交换</li><li>使用者：公用网（因特网），专用网（军队，铁路，电力，银行）</li><li>传输介质：有线，无线</li><li>覆盖范围：广域网（WAN），城域网（MAN），局域网（LAN），个域网（PAN）、</li><li>拓朴结构：总线型，星型，环型，网状型</li></ol><h2 id="三种数据交换方式"><a href="#三种数据交换方式" class="headerlink" title="三种数据交换方式"></a>三种数据交换方式</h2><h3 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h3><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240911104744761.png" alt="image-20240911104744761"></p><p>计算机之间的数据传输是突发式的，当使用电路交换来传送计算机数据时，其线路的传输效率一般都会很低，线路上真正用来传送数据的时间往往不到10%甚至1%，因此计算机通讯通常采用分组交换。</p><h3 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h3><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240911110219727.png" alt="image-20240911110219727"></p><p>优点：</p><ol><li>没有建立连接和释放连接的过程</li><li>分组传输过程中逐段占用通信链路，有较高的通信线路利用率</li><li>交换节点可以为每一个分组独立选择转发路由，使得网络有很好的生存性</li></ol><p>缺点：</p><ol><li><p>分组首部带来了额外的传输开销</p></li><li><p>交换节点存储转发分组会造成一定的时延</p></li><li><p>无法确保通信时端到端通信资源全部可用，在通信量较大时可能造成网络拥塞</p></li><li><p>分组可能出现失序和丢失等问题</p><h3 id="报文交换"><a href="#报文交换" class="headerlink" title="报文交换"></a>报文交换</h3></li></ol><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240911110849426.png" alt="image-20240911110849426"></p><h3 id="三种交换方式的对比"><a href="#三种交换方式的对比" class="headerlink" title="三种交换方式的对比"></a>三种交换方式的对比</h3><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240911111044298.png" alt="image-20240911111044298"></p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240911111137639.png" alt="image-20240911111137639"></p><h2 id="计算机网络性能指标"><a href="#计算机网络性能指标" class="headerlink" title="计算机网络性能指标"></a>计算机网络性能指标</h2><pre><code>### 速率</code></pre><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240911112816478.png" alt="image-20240911112816478"></p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240911112921467.png" alt="image-20240911112921467"></p><p>1 MBps &#x2F; 8 &#x3D; 1 Mbps</p><h3 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h3><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240911113328040.png" alt="image-20240911113328040"></p><p>数据传输速率 &#x3D; min[主机接口速率， 线路带宽，交换机或路由器的接口速率]</p><h3 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h3><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240911114059245.png" alt="image-20240911114059245"></p><h3 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h3><p>时延是指数据从网络的一端传送到另一端所耗费的时间，也称为延迟或者迟延。数据可由一个或多个分组，甚至是一个比特构成</p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240911115038795.png" alt="image-20240911115038795"></p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240911115344939.png" alt="image-20240911115344939"></p><p>在不考虑排队时延和处理时延的情况<img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240911115502472.png" alt="image-20240911115502472"></p><h3 id="时延带宽积"><a href="#时延带宽积" class="headerlink" title="时延带宽积"></a>时延带宽积</h3><p>时延带宽积 &#x3D; 传播时延*带宽</p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240911223336008.png" alt="image-20240911223336008"></p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240911223536065.png" alt="image-20240911223536065"></p><h3 id="往返时间"><a href="#往返时间" class="headerlink" title="往返时间"></a>往返时间</h3><p>往返时间RTT是指通信双方双向交互一次所耗费的时间</p><p><em>卫星链路的往返时间较长<img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240912182647505.png" alt="image-20240912182647505"></em></p><h3 id="利用率"><a href="#利用率" class="headerlink" title="利用率"></a>利用率</h3><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240911224047514.png" alt="image-20240911224047514"></p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240911225338020.png" alt="image-20240911225338020"></p><h3 id="丢包率"><a href="#丢包率" class="headerlink" title="丢包率"></a>丢包率</h3><p>丢包率是指在一定的时间范围内，传输过程中丢失的分组数量与总分组数量的比率</p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240912182002672.png" alt="image-20240912182002672"></p><p>分组丢失主要有以下两种情况：</p><ol><li>分组在传输过程中出现误码，被传输路径中的节点交换机（例如路由器）或目的主机检测出误码而丢弃</li><li>节点交换机根据丢弃策略主动丢弃分组</li></ol><p>丢包率可以反映网络的拥塞情况：</p><ol><li>无拥塞时路径丢包率为0</li><li>轻度拥塞时路径丢包率为1%~4%</li><li>严重拥塞时路径丢包率为5%~15%</li></ol><h2 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h2><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240912184209565.png" alt="image-20240912184209565"></p><p>OSI标准失败的原因：</p><ol><li>专家没有实际经验，完成标准时没有商业驱动力</li><li>协议实现过分复杂，运行效率很低</li><li>标准的制定周期太长，产品无法及时进入市场</li><li>层次划分不太合理，有些功能在多个层次中重复出现</li></ol><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240912184246552.png" alt="image-20240912184246552"></p><h3 id="计算机网络体系结构分层的必要性"><a href="#计算机网络体系结构分层的必要性" class="headerlink" title="计算机网络体系结构分层的必要性"></a>计算机网络体系结构分层的必要性</h3><p>“分层”可以将庞大复杂的问题转化为若干较小的局部问题</p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240912204420544.png" alt="image-20240912204420544"></p><p>  <img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240912204710111.png" alt="image-20240912204710111"></p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240912204723982.png" alt="image-20240912204723982"></p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240912204742961.png" alt="image-20240912204742961"></p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240912204757354.png" alt="image-20240912204757354"></p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240912204813061.png" alt="image-20240912204813061"></p><h3 id="计算机网络体系结构分层思想举例"><a href="#计算机网络体系结构分层思想举例" class="headerlink" title="计算机网络体系结构分层思想举例"></a>计算机网络体系结构分层思想举例</h3><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240912205437524.png" alt="image-20240912205437524"></p><h3 id="计算机网络体系结构中的专业术语"><a href="#计算机网络体系结构中的专业术语" class="headerlink" title="计算机网络体系结构中的专业术语"></a>计算机网络体系结构中的专业术语</h3><ul><li>实体</li></ul><p>​实体是指任何可以发送或接收信息的硬件或软件进程</p><p>​对等实体是指通信双方相同层次中的实体</p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240912210318765.png" alt="image-20240912210318765"></p><ul><li><p>协议：</p><p>​协议是控制两个对等实体在“水平方向”进行“逻辑通信”的规则的集合</p><ul><li>协议三要素：<ul><li><strong>语法</strong>：定义所交换信息的<strong>格式</strong></li><li><strong>语义</strong>：定义通信双方所要完成的<strong>操作</strong></li><li><strong>同步</strong>：定义通信双方的<strong>时序</strong>关系</li></ul></li></ul></li></ul><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240912210600443.png" alt="’"></p><ul><li>服务</li></ul><p>在协议的控制下，两个对等实体在水平方向的逻辑通信使得本层能够向上一层提供服务。要实现本层协议，还需要使用下面一层所提供的服务。</p><p>协议是<em>”水平“</em>的，而服务是<em>”垂直“</em>的</p><p>实体看不见下层提供的服务，但并不知道实现该服务的具体协议，下层的协议对上层的实体是“透明“的。</p><p>在同一系统中相邻两层的实体交换信息的逻辑接口称为服务访问点SAP，它被用于区分不同的服务类型。帧的”类型“字段，IP数据报的”协议“字段，TCP保温段或UDP用户数据报的”端口号“字段都是SAP。</p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240912211719549.png" alt="image-20240912211719549"></p><p>上层要使用下层所提供的服务，还必须通过与下层交换一些命令，这些命令被称为服务原语。</p><p>对等层次之间传送的数据包称为该层的协议数据单元（Protocol Data Unit，PDU）。同一系统内层与层之间交换的数据包称为服务数据单元（Service Data Unit，SDU）。</p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240912212045977.png" alt="image-20240912212045977"></p><h1 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h1><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240913212842316.png" alt="image-20240913212842316"></p><h2 id="物理层接口特性"><a href="#物理层接口特性" class="headerlink" title="物理层接口特性"></a>物理层接口特性</h2><ul><li>机械特性<ul><li>形状和尺寸</li><li>引脚数目和排序</li><li>固定和锁定装置</li></ul></li><li>电气特性<ul><li>信号电压的范围</li><li>抗阻匹配的情况</li><li>传输速率</li><li>距离限制</li></ul></li><li>功能特性<ul><li>规定接口电缆的<strong>各条信号线的作用</strong></li></ul></li><li>过程特性<ul><li>规定在信号线上传输比特流的一组操作过程，包括各信号间的<strong>时序关系</strong></li></ul></li></ul><h2 id="传输媒体"><a href="#传输媒体" class="headerlink" title="传输媒体"></a>传输媒体</h2><p>传输媒体是计算机网络设备之间的物理通路，也称为传输介质或传输媒介。传输媒体并不包含在计算机网络体系结构中（如果非要加上的话，应该还在物理层下面，属于第0层）。</p><h3 id="传输媒体的分类"><a href="#传输媒体的分类" class="headerlink" title="传输媒体的分类"></a>传输媒体的分类</h3><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240913214242073.png" alt="image-20240913214242073"></p><h4 id="导向型传输媒体"><a href="#导向型传输媒体" class="headerlink" title="导向型传输媒体"></a>导向型传输媒体</h4><ul><li>同轴电缆</li></ul><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240913214416170.png" alt="image-20240913214416170"></p><ul><li>双绞线</li></ul><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240913214556259.png" alt="image-20240913214556259"></p><ul><li>光纤</li></ul><p>光纤通信利用光脉冲在光纤中的传递来进行通信。由于可见光的频率非常高（约为10^8^MHz量级），因此一个光纤通信系统的传输带宽远大于目前其他各种传输媒体的带宽。</p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240913215141940.png" alt="image-20240913215141940"></p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240913215520443.png" alt="image-20240913215520443"></p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240913215751649.png" alt="image-20240913215751649"></p><h4 id="非导向型传输媒体"><a href="#非导向型传输媒体" class="headerlink" title="非导向型传输媒体"></a>非导向型传输媒体</h4><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240913215840539.png" alt="image-20240913215840539"></p><ul><li>无线电波</li><li>微波</li><li>红外线</li><li>激光</li><li>可见光</li></ul><h3 id="传输方式"><a href="#传输方式" class="headerlink" title="传输方式"></a>传输方式</h3><ul><li>串行传输和并行传输</li></ul><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240913220805189.png" alt="image-20240913220805189"></p><ul><li>同步传输和异步传输</li></ul><p>同步传输：<img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240913221015767.png" alt="image-20240913221015767"></p><p>异步通信：<img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240913221112449.png" alt="image-20240913221112449"></p><ul><li>单向通信，双向交替通信和双向同时通信</li></ul><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240913221301731.png" alt="image-20240913221301731"></p><h2 id="编码和调制"><a href="#编码和调制" class="headerlink" title="编码和调制"></a>编码和调制</h2><h3 id="编码和调制的基本概念"><a href="#编码和调制的基本概念" class="headerlink" title="编码和调制的基本概念"></a>编码和调制的基本概念</h3><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240914214901113.png" alt="image-20240914214901113"></p><ul><li><p>码元</p><p>在使用时间域的波形表示信号时，代表不同离散数值的<strong>基本波形</strong>称为码元。</p></li></ul><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240919101543316.png" alt="image-20240919101543316"></p><h3 id="常用编码方式"><a href="#常用编码方式" class="headerlink" title="常用编码方式"></a>常用编码方式</h3><ul><li>双极性不归零编码（编码效率高，但存在同步问题）</li><li>双极性归零编码（自同步，但编码效率低）</li><li>曼彻斯特编码（自同步，10Mb&#x2F;s传统以太网，10BaseT以太网使用的是曼彻斯特编码）</li><li>差分曼彻斯特编码</li></ul><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240919101520942.png" alt="image-20240919101520942"></p><h3 id="基本的带通调制方法和混合调制方法"><a href="#基本的带通调制方法和混合调制方法" class="headerlink" title="基本的带通调制方法和混合调制方法"></a>基本的带通调制方法和混合调制方法</h3><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240914220718713.png" alt="image-20240914220718713"></p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240914220801640.png" alt="image-20240914220801640"><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240914220808228.png" alt="image-20240914220808228"><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240914221245916.png" alt="image-20240914221245916"></p><h2 id="信道"><a href="#信道" class="headerlink" title="信道"></a>信道</h2><h3 id="造成信号失真的主要因素"><a href="#造成信号失真的主要因素" class="headerlink" title="造成信号失真的主要因素"></a>造成信号失真的主要因素</h3><ul><li><p>码元的传输速率：传输速率越高，信号经过传输后的失真就越严重</p></li><li><p>信号的传输距离：传输距离越远，信号经过传输后的失真就越严重</p></li><li><p>噪声干扰：噪声干扰越大，信号经过传输后的失真就越严重</p></li><li><p>传输媒体的质量：传输媒体质量越差，信号经过传输后的失真就越严重</p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240918150507872.png" alt="image-20240918150507872"></p></li></ul><h3 id="奈氏准则"><a href="#奈氏准则" class="headerlink" title="奈氏准则"></a>奈氏准则</h3><p>理想低通信道的最高码元传输速率 &#x3D; 2W Baud &#x3D; 2 W 码元&#x2F;秒</p><p>W：信道的频率带宽（单位为Hz）</p><p>Baud：波特，即码元&#x2F;秒</p><ul><li>使用奈氏准则给出的公式，就可以根据信道的频率带宽，计算出信道的最高码元传输速率</li><li>只要码元传输速率不超过根据奈氏准则计算出的上限，就可以避免码间串扰</li><li>奈式准则给出的是理想低通信道的最高码元传输速率，它和实际信道有较大的差别。因此，一个实际的信道所能传输的最高码元传输速率，要明显低于奈式准则给出的上限值</li></ul><p>码元传输速率又称为波特率，调制速率，波形速率或符号速率</p><ul><li>波特率与比特率有一定的关系：<ul><li>当1个码元只携带1比特的信息量时，波特率（码元&#x2F;秒）与比特率（比特&#x2F;秒）在数值上是相等的</li><li>当1个码元只携带n比特的信息量时，波特率（码元&#x2F;秒）转换成比特率（比特&#x2F;秒）时，数值要乘以n</li></ul></li></ul><h3 id="香农公式"><a href="#香农公式" class="headerlink" title="香农公式"></a>香农公式</h3><p>带宽受限且有高斯白噪声干扰的信道的极限信息传输速率</p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240918152500822.png" alt="image-20240918152500822"></p><ul><li>信道的频率带宽W或信道中的信噪比S&#x2F;N越大，信道的极限信息传输速率C就越高</li><li>实际信道不可能无限制地提高频率带宽W或信道中的信噪比S&#x2F;N</li><li>实际信道中能够达到的信息传输速率，要比香农公式给出的极限传输速率低不少。这是因为在实际信道中，信号还要受到其他一些损伤，例如各种脉冲干扰和信号衰减等，这些因素在香农公式中并未考虑</li></ul><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240918152835030.png" alt="image-20240918152835030"></p><h2 id="信道复用"><a href="#信道复用" class="headerlink" title="信道复用"></a>信道复用</h2><h3 id="信道复用技术的基本原理"><a href="#信道复用技术的基本原理" class="headerlink" title="信道复用技术的基本原理"></a>信道复用技术的基本原理</h3><ul><li>复用就是在一条传输媒体上同时传输多路用户的信号</li><li>当一条传输媒体的传输容量大于多条信道传输的总容量时，就可以通过复用技术，在这条传输媒体上建立多条通信信道，以便充分利用传输媒体的带宽</li><li>尽管实现信道复用会增加通信成本（需要复用器，分用器以及费用较高的大容量共享信道），但如果复用的信道数量较大，还是比较划算的</li></ul><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240919101824151.png" alt="image-20240919101824151"></p><h3 id="常见的信道复用技术"><a href="#常见的信道复用技术" class="headerlink" title="常见的信道复用技术"></a>常见的信道复用技术</h3><ul><li>频分复用FDM</li></ul><p>频分复用的所有用户同时占用不同的频带资源发送数据</p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240919105948969.png" alt="image-20240919105948969"></p><ul><li>时分复用TDM</li></ul><p>时分复用的所有用户在不同的时间占用同样的频带</p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240919110107438.png" alt="image-20240919110107438"></p><ul><li>波分复用WDM</li></ul><p>也即光的频分复用FDM。根据频分复用的设计思想，可在一根光纤上同时传输多个频率（波长）相近的光载波信号，实现基于光纤的频分复用技术。目前可以在一根光纤上复用80路或更多的光载波信号，因此，这种复用技术也称为密集波分复用DWDM。铺设光纤的工程耗资巨大，应该尽量在一根光缆中放入尽可能多的光纤，然后对每一根光纤使用密集波分复用技术。</p><ul><li>码分复用CDM</li></ul><p>CDMA将每个比特时间划分为m个更短的时间片，称为码片（Chip）。m的取值通常是64或128.</p><p>CDMA中的每个站点都被指派一个唯一的m比特码片序列（Chip Sequence）：</p><ol><li><p>某个站要发送比特1，则发送它自己的m比特码片序列；</p></li><li><p>某个站要发送比特0，则发送它自己的m比特码片序列的反码</p></li></ol><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240919113926940.png" alt="image-20240919113926940"></p><p>如果有两个或多个站同时发送数据，则信道中的信号就是这些站各自所发送的一系列码片序列或码片序列反码的叠加。为了从信道中分离出每个站的信号，给每个站指派码分序列时，必须遵循以下规则：</p><ol><li>分配给每个站的码片序列必须各不相同，实际常采用伪随机码序列</li><li>分配给每个站的码片序列必须相互正交，即各码片序列相应的码片向量之间的规格化内积为0</li></ol><h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><h2 id="地位"><a href="#地位" class="headerlink" title="地位"></a>地位</h2><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240919114439634.png" alt="image-20240919114439634"></p><h2 id="链路，数据链路和帧"><a href="#链路，数据链路和帧" class="headerlink" title="链路，数据链路和帧"></a>链路，数据链路和帧</h2><ul><li>链路（Link）是指从一个节点到相邻节点的一段物理线路（有线或无线），而中间没有任何其他的交换节点</li><li>数据链路（Data Link）是基于链路的。当在一条链路上传送数据时，除需要链路本身，还需要一些必要的通信协议来控制这些数据的传输，把实现这些协议的硬件和软件加到链路上，就构成了数据链路</li><li>计算机中的网络适配器（俗称网卡）和其相应的软件驱动程序就实现了这些协议。一般的网络适配器包含了物理层和数据链路层这两层的功能</li><li>帧（Frame）是数据链路层对等实体之间在水平方向进行逻辑通信的协议数据单元PDU</li></ul><h2 id="数据链路层的三个重要问题"><a href="#数据链路层的三个重要问题" class="headerlink" title="数据链路层的三个重要问题"></a>数据链路层的三个重要问题</h2><ul><li>封装成帧和透明传输</li></ul><p>封装成帧：</p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240919120243618.png" alt="image-20240919120243618"></p><p>透明传输：</p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240919150634995.png" alt="image-20240919150634995"></p><ul><li>差错检测</li><li>可靠传输<ul><li>不可靠传输服务：直接丢弃有误码的帧</li><li>可靠传输服务：实现发送方发送什么，接收方最终都能正确收到</li></ul></li></ul><h3 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h3><p>封装成帧是指数据链路层给上层交付下来的协议数据单元PDU添加一个首部和一个尾部，使之成为帧。</p><ul><li>帧的首部和尾部中包含有一些重要的控制信息</li><li>帧首部和尾部的作用之一就是帧定界</li></ul><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240919152524194.png" alt="image-20240919152524194"></p><ul><li>为了提高数据链路层传输帧的效率，应当使帧的数据载荷的长度尽可能地大于首部和尾部的长度</li><li>考虑到对缓存空间的需求以及差错控制等诸多因素，每一种数据链路层协议都规定了帧的数据载荷的长度上限，即最大传送单元（Maximum Transfer Unit，MTU）。例如，以太网的MTU为1500个字节。</li></ul><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240919153413706.png" alt="image-20240919153413706"></p><h3 id="透明传输"><a href="#透明传输" class="headerlink" title="透明传输"></a>透明传输</h3><p>透明传输是指<strong>数据链路层对上层交付下来的协议数据单元PDU没有任何限制</strong>，就好像数据链路层不存在一样</p><ul><li>面向字节的物理链路使用字节填充的方法实现透明传输</li><li>面向比特的物理链路使用比特填充的方法实现透明传输</li></ul><p>高级数据链路控制协议HDLC采用帧首部和帧尾部中的标志字段作为帧定界符，其值为01111110.HDLC为了实现“透明传输”，采用“零比特填充法”，即每五个连续比特1后面插入一个比特0</p><h3 id="差错检测"><a href="#差错检测" class="headerlink" title="差错检测"></a>差错检测</h3><ul><li>实际的通信链路都不是理想的，比特在传输过程中可能会产生差错（称为比特差错）：<ul><li>比特1可能变成比特0</li><li>比特0可能变成比特1</li></ul></li><li>在一段时间内，传输错误的比特数量占所传输比特总数的比率称为误码率（Bit Error Rate，BER）</li><li>提高链路的信噪比，可以降低误码率。但在实际的通信链路上，不可能使误码率下降为零</li><li>使用差错检测技术来检测数据在传输过程中是否产生了比特差错，是数据链路层所要解决的重要问题之一</li></ul><h4 id="奇偶校验"><a href="#奇偶校验" class="headerlink" title="奇偶校验"></a>奇偶校验</h4><ul><li>奇校验是在待发送的数据后面添加1个校验位，使得添加该校验位后的整个数据中比特1的个数为奇数</li><li>偶校验是在待发送的数据后面添加1个校验位，使得添加该校验位后的整个数据中比特1的个数为偶数</li><li>在所传输的数据中，如果有奇数个位发生误码，则所包含比特1的数量的奇偶性会发生改变，可以检测出误码</li><li>在所传输的数据中，如果有偶数个位发生误码，则所包含比特1的数量的奇偶性不会发生改变，不可以检测出误码（漏检）</li><li>在实际使用时，奇偶校验又可以分为垂直奇偶校验，水平奇偶校验以及水平垂直奇偶校验</li></ul><h4 id="循环冗余校验"><a href="#循环冗余校验" class="headerlink" title="循环冗余校验"></a>循环冗余校验</h4><p>数据链路层广泛使用漏检率极低的循环冗余校验（Cyclic Redundancy Check，CRC）检错技术</p><p>循环冗余校验CRC的基本思想：</p><ul><li>收发双方约定豪一个生成多项式G（X）</li><li>发送方基于待发送的数据和生成多项式G（X），计算出差错检测码（冗余码），将冗余码添加到待发送数据的后面一起传输</li><li>接受方收到数据和冗余码后，通过生成多项式G（X）来计算收到的数据和冗余码是否产生了误码</li></ul><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240920193228957.png" alt="image-20240920193228957"></p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240920193311352.png" alt="image-20240920193311352"></p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240920193610742.png" alt="image-20240920193610742"></p><ul><li>奇偶校验，循环冗余校验等差错检测技术，只能检测出传输过程中出现了差错，但并不能定位错误，因此无法纠正错误</li><li>想要纠正传输中的差错，可以使用冗余信息更多的纠错码（如海明码）进行前向纠错。但纠错码的开销比较大，在计算机网络中较少使用</li><li>循环冗余检验CRC具有很好的检错能力（漏检率极低），虽然计算比较复杂，但非常易于用硬件实现，因此被广泛用于数据链路层</li></ul><h3 id="可靠传输"><a href="#可靠传输" class="headerlink" title="可靠传输"></a>可靠传输</h3><p>使用差错检测技术，接收方的数据链路层就可以检测出帧在传输过程中时候产生了误码（比特差错）</p><ul><li><strong>有线链路</strong>的误码率比较低，并<strong>不要求</strong>数据链路层向其上层提供可靠传输服务</li><li><strong>无线链路</strong>易受干扰，误码率较高，因此要求数据链路层<strong>必须</strong>向其上层提供<strong>可靠传输服务</strong></li></ul><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240921114227380.png" alt="image-20240921114227380"></p><ul><li>可靠传输服务并不局限于数据链路层，其他各层均可选择实现可靠传输</li><li>可靠传输的实现比较复杂，开销较大，是否使用可靠传输取决于应用需求</li></ul><h4 id="停止-等待（Stop-and-Wait，SW）协议"><a href="#停止-等待（Stop-and-Wait，SW）协议" class="headerlink" title="停止-等待（Stop-and-Wait，SW）协议"></a>停止-等待（Stop-and-Wait，SW）协议</h4><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240921115538412.png" alt="image-20240921115538412"></p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240921115723515.png" alt="image-20240921115723515"></p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240921115912104.png" alt="image-20240921115912104"></p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240921120050832.png" alt="image-20240921120050832"></p><ul><li>使用超时重传机制后，就可以不适用否认机制了，这样可使协议实现起来更加简单。但是，如果点对点链路的误码率较高，使用否认机制可以使发送方在超时计时器超时前就尽快重传</li><li>为了让接收方能够判断所收到的数据分组是否是重复的，需要给数据分组编号。由于停止-等待协议的特性，只需要1个比特需要即可，即序号0和序号1</li><li>为了让发送方能够判断所收到的确认分组时候是重复的，需要给确认分组编号，所用比特数量与数据分组所用比特数量一样<ul><li>数据链路层一般不会出现确认分组迟到的情况，因此在数据链路层实现停止-等待协议可以不用给确认分组编号</li></ul></li><li>给超时计时器设置的超时重传时间RTO应当仔细选择，一般将RTO设置为略大于收发双方的平均往返时间RTT<ul><li>在数据链路层，点对点的往返时间RTT比较固定，RTO就比较好设定</li><li>在传输层，由于端到端往返时间非常不确定，设置合适的超时重传时间RTO有时并不容易</li></ul></li><li>停止-等待协议属于自动请求重传（Automatic Repeat reQuest，ARQ）协议。即重传的请求是发送方自动进行的，而不是接受方请求发送方重传某个误码的数据分组</li></ul><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240921162609511.png" alt="image-20240921162609511"></p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240921161449151.png" alt="image-20240921161449151"></p><ul><li>若出现超时重传，对于传送有用的数据信息来收，信道利用率还要降低</li><li>在往返时间RTT相对较大的情况下，为了提高信道利用率，收发双方不适合采用停止-等待协议，而可以选择使用回退N帧（GBN）协议或选择重传（SR）协议</li></ul><h4 id="回退N帧（Go-back-N，GBN）协议"><a href="#回退N帧（Go-back-N，GBN）协议" class="headerlink" title="回退N帧（Go-back-N，GBN）协议"></a>回退N帧（Go-back-N，GBN）协议</h4><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240921194845165.png" alt="image-20240921194845165"></p><p>回退N帧协议在流水线传输的基础上，利用发送窗口来限制发送方连续发送数据分组的数量，是一种连续ARQ协议。在回退N帧协议的工作过程中，发送窗口和接收窗口不断向前滑动，因此这类协议又称为滑动窗口协议。</p><ul><li>在信道质量较差（容易出现误码）的情况下，回退N帧协议的信道利用率并不比停止-等待协议的信道利用率高</li></ul><h4 id="选择重传（Selective-Repeat，SR）协议"><a href="#选择重传（Selective-Repeat，SR）协议" class="headerlink" title="选择重传（Selective Repeat，SR）协议"></a>选择重传（Selective Repeat，SR）协议</h4><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240921202733591.png" alt="image-20240921201350129"></p><p>与回退N帧协议不同，选择重传协议不采用累计确认，接收方需要对每一个正确接收的数据分组进行逐一确认，<strong>发送方仅重传未收到确认而超时的数据帧</strong>。</p><h2 id="点对点协议PPP"><a href="#点对点协议PPP" class="headerlink" title="点对点协议PPP"></a>点对点协议PPP</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>点对点协议（Point-to-Point Protocol，PPP）是目前使用最广泛的点对点数据链路层协议</li><li>点对点协议PPP是因特网工程任务组（Internet Engineering Task Force，IETF）在1992年制定的。经过多次修订，目前PPP已成为因特网的正式标准</li></ul><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240921204146375.png" alt="image-20240921204146375"></p><h3 id="PPP的帧格式"><a href="#PPP的帧格式" class="headerlink" title="PPP的帧格式"></a>PPP的帧格式</h3><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240921204154718.png" alt="image-20240921204154718"></p><h3 id="PPP帧的透明传输"><a href="#PPP帧的透明传输" class="headerlink" title="PPP帧的透明传输"></a>PPP帧的透明传输</h3><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240921204216565.png" alt="image-20240921204216565"></p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240921204232628.png" alt="image-20240921204232628"></p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240921204245665.png" alt="image-20240921204245665"></p><h3 id="PPP的工作状态"><a href="#PPP的工作状态" class="headerlink" title="PPP的工作状态"></a>PPP的工作状态</h3><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240921204255413.png" alt="image-20240921204255413"></p><h2 id="共享式以太网"><a href="#共享式以太网" class="headerlink" title="共享式以太网"></a>共享式以太网</h2><h3 id="网络适配器"><a href="#网络适配器" class="headerlink" title="网络适配器"></a>网络适配器</h3><ul><li>要将计算机连接到以太网，需要使用相应的网络适配器，网络适配器一般简称为“网卡”</li><li>在计算机内部，网卡与CPU之间的通信，一般是通过计算机主板上的I&#x2F;O总线以并行传输方式进行</li><li>网卡与外部以太网（局域网）之间的通信，一般是通过传输媒体（同轴电缆，双绞线电缆，光纤）以串行方式进行的</li><li>网卡除要实现物理层和数据链路层功能，还要进行并行传输和串行传输的转换</li><li>为确保王阿库正常工作，还要下载相应的设备驱动程序，驱动程序负责驱动网卡发送和接收帧</li></ul><h3 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h3><ul><li>MAC地址一般被固化在网卡的电可擦可编程只读存储器EEPROM中，因此MAC地址也被称为硬件地址，有时也被称为物理地址</li><li>一般情况下，普通用户计算机至少包含两块网卡：一块接入有线局域网的以太网卡，一块接入无线局域网的WIFI网卡</li><li>每块网卡都有一个全球唯一的MAC地址，交换机和路由器往往具有更多的网络接口，所以会拥有更多的MAC地址。严格来说，MAC地址是对网络上各接口的唯一标识，而不是对网络上各设备的唯一标识</li></ul><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240922090115781.png" alt="image-20240922090115781"></p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240922090148879.png" alt="image-20240922090148879"></p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240922090216310.png" alt="image-20240922090216310"></p><ul><li>网卡从网络上每收到一个无误码的帧，就检查帧首部中的目的MAC地址，按以下情况处理<ul><li>如果目的MAC地址是广播地址(FF-FF-FF-FF-FF-FF)则接受该帧</li><li>如果目的MAC地址与网卡上固化的全球单播MAC地址相同，则接受该帧</li><li>如果目的MAC地址是网卡支持的多播地址，则接受该帧</li><li>除上述的情况，丢弃该帧</li></ul></li><li>网卡还可被设置为一种特殊的工作方式：混杂方式(Promiscuous Mode)。工作在混杂方式的网卡，只要收到共享媒体上传来的帧就会收下，而不管帧的目的MAC地址是什么<ul><li>对于网络维护和管理人员，这种方式可以监视和分析局域网上的流量，以便找出提高网络性能的具体措施</li><li>嗅探器(Sniffer)就是一种工作在混杂方式的网卡，再配合相应的工具软件(WireShark)，就可以作为一种非常有用的网络工具来学习和分析网络</li></ul></li></ul><h3 id="CSMA-CD协议"><a href="#CSMA-CD协议" class="headerlink" title="CSMA&#x2F;CD协议"></a>CSMA&#x2F;CD协议</h3><p>在以太网的发展初期，人们普遍认为“无源的电缆线比有源器件可靠”，因此将多个站点连接在一条总线上来构建共享总线以太网。共享总线以太网具有天然的广播特性，即使总线上某个站点给另一个站点发送单播帧，表示帧的信号也会沿着总线传播到总线上的其他各站点。</p><p>当某个站点在总线上发送帧时，总线资源就会被该站点独占。此时，如果总线上其他站点也要在总线上发送帧，就会产生信号碰撞。当两个火多个站点同时使用总线发送帧时，就会产生信号碰撞。</p><p>为了解决各站点争用总线的问题，共享总线以太网使用了一种专用协议CSMA&#x2F;CD，它是载波监听多址接入&#x2F;碰撞检测（Carrier Sense Multiple Access Collision Detection）的英文缩写</p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240922092215471.png" alt="image-20240922092215471"></p><ul><li>载波监听检测到总线空闲，但总线不一定空闲</li><li>使用CSMA&#x2F;CD协议的共享总线以太网上的各站点，只是尽量避免碰撞并在出现碰撞时做出退避后重发的处理，并不能完全避免碰撞</li><li>在使用CSMA&#x2F;CD协议时，由于正在发送帧的站点必须“边发送帧边检测碰撞”，因此站点不可能同时进行发送和接收，也就是不可能进行全双工通信，而只能进行半双工通信（双向交替通信）</li></ul><h3 id="共享式以太网的争用期"><a href="#共享式以太网的争用期" class="headerlink" title="共享式以太网的争用期"></a>共享式以太网的争用期</h3><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240922101933445.png" alt="image-20240922101933445"></p><ul><li>使用CSMA&#x2F;CD协议的共享总线以太网上的任意站点在发送帧的过程中都可能会遭遇碰撞</li><li>站点从发送帧开始，最多经过时长2t就可以检测出所发送的帧是否遭遇了碰撞。所以，共享总线以太网的端到端往返时间2t被称为争用期或碰撞窗口，它是一个非常重要的参数<ul><li>站点从发送帧开始，经过争用期2t这段时间还没有检测到碰撞，就可以肯定这次发送不会产生碰撞</li></ul></li><li>从争用期的概念可以看出，共享总线以太网上的每一个站点从发送帧开始，到之后的一小段时间内，都有可能遭遇碰撞，而这一小段时间的长短时不确定的，它取决于另一个发送帧的站点与本站点的距离，但不会超过总线的端到端往返传播时延，即一个争用期2t<ul><li>总线的长度越长，单程端到端传播时延越大，网络中站点数量越多，发生碰撞的概率就越大，共享以太网的总线长度不能太长，接入的站点数量也不能太多</li></ul></li></ul><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240922102602684.png" alt="image-20240922102602684"></p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240922102614092.png" alt="image-20240922102614092"></p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240922102623724.png" alt="image-20240922102623724"></p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240922102642305.png" alt="image-20240922102642305"></p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240922102702360.png" alt="image-20240922102702360"></p><p><strong>最小帧长 &#x3D; 数据传输效率 * 争用期2t</strong></p><h3 id="共享式以太网的退避算法"><a href="#共享式以太网的退避算法" class="headerlink" title="共享式以太网的退避算法"></a>共享式以太网的退避算法</h3><p>——截断二进制指数规避算法</p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240922103836009.png" alt="image-20240922103836009"></p><h3 id="共享式以太网的信道利用率"><a href="#共享式以太网的信道利用率" class="headerlink" title="共享式以太网的信道利用率"></a>共享式以太网的信道利用率</h3><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240922103552836.png" alt="image-20240922103552836"></p><h3 id="使用集线器的共享式以太网"><a href="#使用集线器的共享式以太网" class="headerlink" title="使用集线器的共享式以太网"></a>使用集线器的共享式以太网</h3><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240923144234088.png" alt="image-20240923144234088"></p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240923144258917.png" alt="image-20240923144258917"> </p><h3 id="在物理层扩展以太网"><a href="#在物理层扩展以太网" class="headerlink" title="在物理层扩展以太网"></a>在物理层扩展以太网</h3><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240925142824635.png" alt="image-20240925142824635"></p><ul><li>随着使用双绞线和集线器的10BASE-T星型以太网成为以太网的主流类型，扩展网络覆盖范围就很少使用转发器了</li><li>10BASE-T星型以太网中每个站点到集线器的距离不能超过100米，因此两站点间的通信距离最大不能超过200m</li><li>10BASE-T星型以太网中，可使用光纤和一对光纤调制解调器来扩展站点与集线器之间的距离<ul><li>这种扩展方法比较简单，所需要付出的代价是：为站点和集线器各增加一个用于电信号和光信号转换的光纤调制解调器，以及他们之间的一对通信光纤</li></ul></li><li>信号在光纤中的衰减和失真很小，因此使用这种方法可以很简单地将站点与集线器之间的距离扩展到1000m以上</li></ul><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240925143535858.png" alt="image-20240925143535858"></p><h3 id="使用网桥在数据链路层扩展以太网"><a href="#使用网桥在数据链路层扩展以太网" class="headerlink" title="使用网桥在数据链路层扩展以太网"></a>使用网桥在数据链路层扩展以太网</h3><ul><li>网桥工作在数据链路层（包含其下地物理层），因此网桥具备属于数据链路层范畴的相关能力。<ul><li>网桥可以识别帧的结构</li><li>网桥可以根据帧首部中的目的MAC地址和网桥自身的帧转发表来转发或丢弃所收到的帧</li></ul></li></ul><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20240925144324232.png" alt="image-20240925144324232"></p><h4 id="透明网桥"><a href="#透明网桥" class="headerlink" title="透明网桥"></a>透明网桥</h4><ul><li>透明网桥通过自学习算法建立转发表</li><li>透明网桥中的“透明”，是指以太网中的各站点并不知道自己所发送的帧将会经过哪些网桥的转发，最终到达目的站点。也就是说，以太网中的各网桥对于各站点而言是看不见的。</li><li>透明网桥的标准是IEEE 802.1D，它通过一种自学习算法基于以太网中各站点之间的的相互通信逐步建立起自己的转发表<ul><li>网桥收到震后进行登记（自学习），登记的内容为帧的源MAC地址和进入网桥的接口号</li><li>网桥根据帧的目的MAC地址和网桥的转发表对帧进行转发，包含以下三种情况：<ul><li>明确转发：网桥知道应当从哪个接口转发帧</li><li>盲目转发：网桥不知道应当从哪个接口转发帧，只能将其通过除进入网桥的接口外的其他所有接口转发</li><li>丢弃：网桥知道不应该转发该帧，将其丢弃</li></ul></li></ul></li><li>如果网桥收到一个有误码的帧，则直接丢弃</li><li>如果网桥收到一个无误码的广播帧，则不用进行查表，而是直接从除接收该广播帧的接口的其他接口转发该广播帧</li><li>转发表中的每条记录都有其有效时间，到期自动删除。这是因为各站点的MAC地址与网桥接口的对应关系并不是永久性的，例如某个站点更换了网卡，其MAC地址就会改变</li></ul><h4 id="透明网桥的生成树协议STP"><a href="#透明网桥的生成树协议STP" class="headerlink" title="透明网桥的生成树协议STP"></a>透明网桥的生成树协议STP</h4><ul><li>为了提高以太网的可靠性，有时需要在两个以太网之间使用多个透明网桥来提供冗余链路</li><li>在增加荣誉链路提高以太网可靠性的同时，却给网络引入了环路</li><li>为了避免广播帧在环路中兜圈，透明网桥使用生成树协议（Spanning Tree Protocol，STP），可以在增加冗余链路提高网络可靠性的同时，又避免环路带来的问题<ul><li>不管网桥之间连接成了怎样复杂的带环拓扑，网桥之间通过交互网桥协议单元，罩住原网络拓扑地一个连通子集（生成树），在这个子集里整个连通的网络中不存在环路</li></ul></li></ul><h2 id="交换式以太网"><a href="#交换式以太网" class="headerlink" title="交换式以太网"></a>交换式以太网</h2><ul><li>网桥的接口数量很少，通常只有2-4个，一般只用来连接不同的网段</li><li>仅使用交换机（而不使用集线器）的以太网就是交换式以太网</li></ul><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20241025174855521.png" alt="image-20241025174855521"></p><h3 id="以太网交换机"><a href="#以太网交换机" class="headerlink" title="以太网交换机"></a>以太网交换机</h3><p> 以太网交换机本质上就是一个多接口的网桥：</p><ul><li>交换机自学习和转发帧的流程与网桥是相同的</li><li>另外，交换机也使用生成树协议STP，来产生能够连通全网但不产生环路的通信路径</li></ul><p>交换机的每个接口可以连接计算机，也可以连接集线器或另一个交换机</p><ul><li>当交换机的接口与计算机或交换机连接时，可以工作在<strong>全双工方式</strong>，并能在自身内部同时连通多对接口，这样每一对相互通信的计算机就能无碰撞地传输数据</li><li>当交换机地接口连接的是集线器时，该接口就只能使用CSMA&#x2F;CD协议并只能工作在<strong>半双工方式</strong></li></ul><p>一般的交换机都采用<strong>“存储转发”</strong>方式，为了减小交换机的转发时延，某些交换机采用了<strong>直通</strong>交换方式，该方式会在接收帧的同时就立即按帧的目的MAC地址决定该帧的转发接口，然后通过其内部基于硬件鹅交叉矩阵进行转发，而不必把整个帧先缓存后再进行处理</p><ul><li>直通交换的时延非常小</li><li>直通交换不检查差错就直接将帧转发出去，有可能会将一些无效帧转发给其他主机</li></ul><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20241028093834997.png" alt="image-20241028093834997"></p><h2 id="以太网的MAC帧格式"><a href="#以太网的MAC帧格式" class="headerlink" title="以太网的MAC帧格式"></a>以太网的MAC帧格式</h2><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20241029112850108.png" alt="image-20241029112850108"></p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20241029113023995.png" alt="image-20241029113023995"></p><p>接收方可能收到无效MAC帧包括以下几种：</p><ul><li>MAC帧的长度不是整数个字节</li><li>通过MAC帧的FCS字段的值检测出帧有误码</li><li>MAC帧的长度不在64-1518字节之间</li></ul><p><strong>接收方收到无效的MAC帧时，就简单的丢弃，以太网的数据链路层没有重传机制</strong></p><h2 id="虚拟局域网VLAN"><a href="#虚拟局域网VLAN" class="headerlink" title="虚拟局域网VLAN"></a>虚拟局域网VLAN</h2><p>VLAN是一种将局域网内的站点划分成<strong>与物理位置无关的逻辑组</strong>的技术，一个逻辑组就是一个VLAN，VLAN中的各站点具有某些共同的应用需求。使得属于同一VLAN的站点之间可以直接进行通信，而不同VLAN中的站点之间不能直接通信</p><h3 id="虚拟局域网VLAN的实现机制"><a href="#虚拟局域网VLAN的实现机制" class="headerlink" title="虚拟局域网VLAN的实现机制"></a>虚拟局域网VLAN的实现机制</h3><p>虚拟局域网VLAN最常见的实现技术就是基于以太网交换机的接口来实现VLAN，而这需要以太网交换机能够实现以下两个功能：</p><ul><li>能够处理带有VLAN标记的帧，也就是IEEE 802.1Q帧</li><li>交换机的各接口可以支持不同的接口类型，不同的接口类型的接口对帧的处理方式有所不同</li></ul><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20241031224745869.png" alt="image-20241031224745869"></p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20241031224813733.png" alt="image-20241031224813733"></p><p>802.1Q帧一般不由用户主机处理，而是以太网交换机来处理：</p><ul><li>当交换机收到普通的以太网MAC帧时，会给其<strong>插入4字节的VLAN标签使之成为802.1Q帧</strong>，该处理简称<strong>”打标签“</strong></li><li>当交换机转发802.1Q帧时，可能会<strong>删除其4字节的VLAN标签使之成为普通的以太网MAC帧</strong>，该处理简称为**“去标签”**。交换机转发802.1Q帧时也有可能不进行“去标签”处理，是否进行“去标签”处理取决于交换机的接口类型。</li></ul><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20241031225127863.png" alt="image-20241031225127863"></p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20241113083648409.png" alt="image-20241113083648409"></p><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><h2 id="网络层概述"><a href="#网络层概述" class="headerlink" title="网络层概述"></a>网络层概述</h2><ul><li>网络层的主要任务是实现网络互联，进而实现数据包在各网络之间的传输</li><li>要实现网络层的功能，需要解决以下的问题：<ul><li>网络层向运输层提供怎样的服务（可靠 or 不可靠）</li><li>网络层寻址问题</li><li>路由选择问题</li></ul></li><li>因特网是目前全世界用户数量最多的互联网，它使用TCP&#x2F;IP协议栈</li><li>由于TCP&#x2F;IP协议栈的网络层使用网际协议IP，它是整个协议栈的核心协议，因此在TCP&#x2F;IP协议栈中网络层常被称为网际层</li></ul><h2 id="网络层提供的两种服务"><a href="#网络层提供的两种服务" class="headerlink" title="网络层提供的两种服务"></a>网络层提供的两种服务</h2><table><thead><tr><th>对比方面</th><th align="left">虚电路服务</th><th>数据报服务</th></tr></thead><tbody><tr><td>思路</td><td align="left">可靠通信应当由网络来保证</td><td>可靠通信应当由用户主机来保证</td></tr><tr><td>连接的建立</td><td align="left">必须建立网络层连接</td><td>不需要建立网络层连接</td></tr><tr><td>终点地址</td><td align="left">仅在连接建立阶段使用，每个分组使用短的虚电路号</td><td>每个分组都有终点的完整地址</td></tr><tr><td>分组的转发</td><td align="left">属于同一条虚电路的分组均按照同一路由进行转发</td><td>每个分组可走不同的路由</td></tr><tr><td>当结点出故障时</td><td align="left">所有通过出故障的结点的虚电路均不能工作</td><td>出故障的结点可能会丢失分组，一些路由可能会发生变化</td></tr><tr><td>分组的顺序</td><td align="left">总是按照发送的顺序到达终点</td><td>到达终点时不一定按发送顺序</td></tr><tr><td>服务质量保证</td><td align="left">可以将通信资源提前分配给每一个虚电路，容易实现</td><td>很难实现</td></tr></tbody></table><h2 id="IPv4"><a href="#IPv4" class="headerlink" title="IPv4"></a>IPv4</h2><h3 id="IPv4地址概述"><a href="#IPv4地址概述" class="headerlink" title="IPv4地址概述"></a>IPv4地址概述</h3><ul><li>IPv4地址就是给因特网上的每一台主机（或路由器）的每一个接口分配一个在全世界范围内是唯一的32比特的标识符</li><li>然而32比特的IPv4地址不方便阅读，记录以及输入等，因此IPv4地址采用点分十进制表示方法</li></ul><h3 id="分类编址的IPv4地址"><a href="#分类编址的IPv4地址" class="headerlink" title="分类编址的IPv4地址"></a>分类编址的IPv4地址</h3><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20241128155409899.png" alt="image-20241128155409899"></p><ul><li>根据地址左起的第一个十进制数的值，可以判断出网络类别（小于127的为A类，128-191的为B类，192-223的为C类）</li></ul><h3 id="划分子网的IPv4地址"><a href="#划分子网的IPv4地址" class="headerlink" title="划分子网的IPv4地址"></a>划分子网的IPv4地址</h3><ul><li>可以从主机号部分借用一部分比特作为子网号</li><li>32比特的子网掩码可以表面分类IP地址的主机号部分被借用了几个比特作为子网号<ul><li>子网掩码使用连续的比特1来对应网络号和子网号</li><li>子网掩码使用连续的比特0来对应主机号</li><li><strong>将划分子网的IPv4地址与其相应的子网掩码进行逻辑与运算就可得到IPv4地址所在子网的网络地址</strong></li></ul></li></ul><p>例如：</p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20241128160348746.png" alt="image-20241128160348746"></p><ul><li>给一个分类的IP地址和其相应的子网掩码，就可直到子网划分的细节<ul><li>划分出的子网数量</li><li>每个子网可分配的IP地址数量</li><li>每个子网的网络地址和广播地址</li><li>每个子网可分配的最小和最大地址</li></ul></li><li>默认的子网掩码是指在未划分子网的情况下使用的子网掩码<ul><li>A类：255.0.0.0</li><li>B类：255.255.0.0</li><li>C类：255.255.255.0</li></ul></li></ul><h3 id="无分类编址的IPv4地址"><a href="#无分类编址的IPv4地址" class="headerlink" title="无分类编址的IPv4地址"></a>无分类编址的IPv4地址</h3><p>为了解决IP地址紧张的问题，因特网工程任务组IETF提出了采用无分类编址的方法来解决IP地址紧张的问题：IETF发布了无分类域间路由选择CIDR（Classless Inter-Domain Routing）：</p><ul><li>CIDR消除了传统的A类，B类和C类地址，以及划分子网的概念</li><li>CIDR可以更加有效地分配IPv4的地址空间</li><li>CIDR使用“斜线记法”，或称CIDR记法。即在IPv4地址后面加上斜线“&#x2F;”，在斜线后面写上网络前缀所占的比特数量</li><li>CIDR实际上是将网络前缀都相同的连续的IP地址组成一个“CIDR地址块”</li><li><strong>只要知道CIDR地址块中的任何一个地址，就可以知道该地址块的全部细节：</strong><ul><li><strong>地址块的最小地址</strong></li><li><strong>地址块的最大地址</strong></li><li><strong>地址块中的地址数量</strong></li><li><strong>地址块聚合某类网络（A类，B类或C类）的数量</strong></li><li><strong>地址掩码（也可继续称之为子网掩码）</strong></li></ul></li><li><strong>路由聚合（构造超网）的方法是找共同前缀</strong></li><li>网络前缀越长，地址块越小，路由越具体</li><li>若路由器查表转发分组时发现有多条路由可选，则选择网络前缀最长的那部分，这成为<strong>最长前缀匹配</strong>，因为这样的路由更具体</li></ul><h3 id="IPv4地址的应用规划"><a href="#IPv4地址的应用规划" class="headerlink" title="IPv4地址的应用规划"></a>IPv4地址的应用规划</h3><table><thead><tr><th>定长的子网掩码FLSM</th><th>变长的子网掩码VLSM</th></tr></thead><tbody><tr><td>使用同一个子网掩码来划分子网</td><td>使用不同的子网掩码来划分子网</td></tr><tr><td>子网划分方式不灵活：只能划分出2^n^个子网（n是从主机号部分借用的用来作为子网号的比特数量）</td><td>子网划分方式灵活：可以按需分配</td></tr><tr><td>每个子网锁分配的IP地址数量相同，容易造成IP地址浪费</td><td>每个子网所分配的IP地址数量可以不同，尽可能减少对IP地址的浪费</td></tr></tbody></table><p>eg：</p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20241128210740701.png" alt="image-20241128210532827"></p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20241128210745347.png" alt="image-20241128210745347"></p><h2 id="IP数据报的发送和转发过程"><a href="#IP数据报的发送和转发过程" class="headerlink" title="IP数据报的发送和转发过程"></a>IP数据报的发送和转发过程</h2><ul><li>主机发送IP数据报</li></ul><p>判断目的主机是否与自己在同一个网络（将自己的ip地址与子网掩码相与，得到自己的网络地址；将目的ip地址也与自己的子网掩码相与，得到目的网络地址）</p><ol><li>若在同一个网络（即网络地址相同），则属于直接交付</li><li>若不在同一个网络（即网络地址不相同），则属于间接交付，传输给主机所在的网络的默认网关（路由器），由默认网关帮忙转发</li></ol><ul><li><p>路由器转发IP数据报</p><p><strong>路由器会隔离广播域，能抑制广播风暴</strong></p><ul><li><p>检查IP数据报首部是否出错</p><p>若出错，则直接丢弃该IP数据报并通告源主机</p><p>若没有出错，则进行转发</p></li><li><p>根据IP数据报的目的地址在路由表中查找匹配的条目</p><p>若找到匹配的条目，则转发给条目中指示的下一跳</p><p>若找不到，则丢弃该IP数据报并通告源主机</p></li></ul></li></ul><h2 id="静态路由配置及其可能产生的路由环路问题"><a href="#静态路由配置及其可能产生的路由环路问题" class="headerlink" title="静态路由配置及其可能产生的路由环路问题"></a>静态路由配置及其可能产生的路由环路问题</h2><ul><li>静态路由配置是指用户或网络管理员使用路由器的相关命令给路由器人工配置路由表<ul><li>这种方式不能及时适应网络状态（流量，拓扑等）的变化</li><li>一般只能在小规模网络中采用</li></ul></li><li>使用静态路由配置可能出现以下导致产生路由环路的错误<ul><li>配置错误</li><li>聚合了不存在的网络</li><li>网络故障</li></ul></li><li>路由条目的类型<ul><li>直连网络</li><li>静态路由（人工配置）</li><li>动态路由（路由选择协议）</li></ul></li><li>特殊的静态路由条目<ul><li>默认路由（目的网络为0.0.0.0，地址掩码为0.0.0.0）</li><li>特定主机路由（目的网络为特定主机的IP地址，地址掩码为255.255.255.255）</li><li>黑洞路由（吓一跳为null0）</li></ul></li></ul><h2 id="路由选择协议概述"><a href="#路由选择协议概述" class="headerlink" title="路由选择协议概述"></a>路由选择协议概述</h2><table><thead><tr><th>静态路由选择</th><th>动态路由选择</th></tr></thead><tbody><tr><td>由人工配置的网络路由，默认路由，特定主机路由，黑洞路由等都属于静态路由</td><td>路由器通过路由选择协议自动获取路由信息</td></tr><tr><td>这种人工配置方式简单，开销小，但不能及时适应网络状态（流量，拓扑等）的变化</td><td>比较复杂，开销比较大，能较好地适应网络状态的变化</td></tr><tr><td>一般只在小规模网络中采用</td><td>适用于大规模网络</td></tr></tbody></table><p>因特网采用分层次地路由选择协议</p><ul><li>内部网关协议IGP<ul><li>路由信息协议RIP</li><li>内部网关路由协议IGRP（已被EIGRP取代）<ul><li>RIP和IGRP基于距离向量</li></ul></li><li>增强型内部网关路由协议EIGRP（结合距离向量和链路状态）</li><li>开放式最短路径优先OSPF</li><li>中间系统到中间系统IS-IS<ul><li>OSPF和IS-IS基于链路状态</li></ul></li></ul></li><li>外部网关协议EGP<ul><li>边界网关协议BGP</li></ul></li></ul><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20241201112817710.png" alt="image-20241201112817710"></p><h3 id="路由信息协议RIP的基本工作原理"><a href="#路由信息协议RIP的基本工作原理" class="headerlink" title="路由信息协议RIP的基本工作原理"></a>路由信息协议RIP的基本工作原理</h3><p>RIP要求自治系统AS内的每一个路由器都要维护从它自己到AS内其他每一个网络的距离记录，这是一组距离，称为“距离向量”。</p><p>RIP使用跳数作为度量来衡量到达目的网络的距离</p><ul><li>路由器到直连网络的距离定义为1</li><li>路由器到非直连网络的距离定义为所经过的路由器数加1</li><li>允许一条路径最多只能包含15个路由器，<strong>“距离”等于16时相当于不可达</strong>。因此，RIP只适用于小型互联网</li></ul><p>RIP认为好的路由就是“距离短”的路由，也就是所通过的路由器数量最少的路由，而不管链路的带宽大小。当到达同一目的网络有多条“距离相等”的路由时，可以进行等价负载均衡</p><p>RIP包含以下三个要点：</p><ul><li>和谁交换信息：仅和相邻路由器交换信息</li><li>交换什么信息：自己的路由表</li><li>何时交换信息：周期性交换（例如30s）</li></ul><h4 id="RIP的基本工作过程"><a href="#RIP的基本工作过程" class="headerlink" title="RIP的基本工作过程"></a>RIP的基本工作过程</h4><ol><li>路由器刚开始工作时，只知道自己到直连网络的距离为1</li><li>每个路由器仅和相邻路由器周期性地交换并更新路由信息</li><li>若干次交换和更新后，每个路由器都知道到达本AS内各网络地最短距离和下一跳地址，称为收敛</li></ol><h4 id="RIP的路由条目更新规则"><a href="#RIP的路由条目更新规则" class="headerlink" title="RIP的路由条目更新规则"></a>RIP的路由条目更新规则</h4><ul><li><p>发现了新的网络，添加</p></li><li><p>到达目的网络，相同下一跳，最新消息，更新</p></li><li><p>到达目的网络，不同下一跳，新路由优势，更新</p></li><li><p>到达目的网络，不同下一跳，新路由劣势，不更新</p></li><li><p>到达目的网络，不同吓一跳，等价负载均衡</p></li></ul><p>RIP存在<strong>“坏消息传播得慢”</strong>的问题，这个问题又称<strong>路由环路</strong>或<strong>距离无穷计数</strong>问题，这是距离向量算法的一个固有问题，可以采取多种措施减少出现该问题的概率或减小该问题带来的危害:</p><ul><li>限制最大路径距离为15（16表示不可达）</li><li>当路由表发生变化时就立即发送更新报文（即“<strong>触发更新</strong>”），而不是周期性发送</li><li>让路由表记录收到某特定路由信息的接口，而不让同一路由信息再通过此接口向反方向传送（即“<strong>水平分割</strong>”）</li></ul><h3 id="开放最短路径优先OSPF的基本工作原理"><a href="#开放最短路径优先OSPF的基本工作原理" class="headerlink" title="开放最短路径优先OSPF的基本工作原理"></a>开放最短路径优先OSPF的基本工作原理</h3><p>OSPF是基于链路状态的，而不像RIP那样是基于距离向量的。OSPF采用SPF算法计算路由，从算法上保证了不会产生路由环路。OSPF不限制网络规模，更行效率高，收敛速度快</p><p>链路状态是指本路由器都和哪些路由器相邻，以及相应链路的“代价”（代价用来表示费用，距离，时延，带宽，等等，这些都由网络管理人员来决定</p><p>使用OSPF的每个路由器都会产生<strong>链路状态通告LSA</strong>，LSA中包含以下内容：1.直连网络的链路状态信息；2. 邻居路由器的链路状态信息</p><p>LSA被封装在<strong>链路状态更新分组LSU</strong>中，采用<strong>洪泛法</strong>发送。</p><p>使用OSPF的每个路由器都有一个<strong>链路状态数据库LSDB</strong>，用于存储LSA。通过各路由器洪泛发送封装有自己LSA的LSU分组，各路由器的LSDB最终将达到一致</p><p>使用OSPF的各路由器基于LSDB进行最短路径优先SPF计算，构建出各自到达其他各路由器的最短路径，即构建各自的路由表</p><p>OSPF有以下五种分组类型：</p><ul><li><strong>问候</strong>分组</li><li><strong>数据库描述</strong>分组</li><li><strong>链路状态请求</strong>分组</li><li><strong>链路状态更新</strong>分组</li><li><strong>链路状态确认</strong>分组</li></ul><p>OSPF在多点接入网络中路由器邻居关系的建立</p><ul><li>选举指定路由器DR和备用的指定路由器BDR</li><li>所有的非DR&#x2F;BDR只与DR&#x2F;BDR建立邻居关系</li><li>非DR&#x2F;BDR之间通过DR&#x2F;BDR交换信息</li></ul><p>为了使OSPF能够用于规模很大的网络，OSPF把一个自治系统再划分为若干个更小的范围，叫做区域（Area），划分区域的好处就是把利用<strong>洪泛法交换链路状体信息的范围局限于每一个区域而不是整个自治系统</strong>，这就减少了整个网络上的通信量</p><h3 id="边界网关协议BGP的基本工作原理"><a href="#边界网关协议BGP的基本工作原理" class="headerlink" title="边界网关协议BGP的基本工作原理"></a>边界网关协议BGP的基本工作原理</h3><p>外部网关协议EGP（例如边界网关协议BGP）</p><ul><li>在不同自治系统内，度量路由的“代价”（距离，带宽，费用等）可能不同。因此，对于自治系统之间的路由选择，使用“代价”作为度量来寻找最佳路由是不行的</li><li>自治系统之间的路由选择必须考虑相关的策略（政治，经济，安全等）</li><li>BGP只能是力求寻找一条能够到达目的网络且比较好的路由，而并非要寻找一条最佳路由</li></ul><h4 id="BGP"><a href="#BGP" class="headerlink" title="BGP"></a>BGP</h4><p>BGP适用于多级结构的因特网。在配置BGP时，每个自治系统的管理员要选择至少一个路由器作为该自治系统的<strong>“BGP发言人”</strong>。不同自治系统的BGP发言人要交换路由信息，首先必须建立<strong>TCP连接</strong>，端口号为<strong>179</strong>：</p><ul><li>在此TCP连接上交换BGP报文以建立<strong>BGP会话</strong></li><li>利用BGP会话<strong>交换路由信息</strong>（例如，增加新的路由，或撤销过时的路由，以及报告出错的情况等）</li><li>使用TCP连接交换路由信息的两个BGP发言人，彼此称为对方的<strong>邻站或对等站</strong></li></ul><p>BGP发言人除了运行BGP外，还必须运行自己所在自治系统所使用的内部网关协议IGP，例如OSPF或RIP。BGP发言人会交<strong>换网络可达性的信息</strong>，在交换之后，各BGP发言人就根据所采用的策略从收到的路由信息中找出到达各自治系统的较好的路由，也就是<strong>构造出树形结构</strong>，<strong>不存在回路的自治系统连通图。</strong></p><p>BGP-4有以下4种报文：</p><ul><li><strong>OPEN（打开）报文</strong>：用来与相邻的另一个BGP发言人建立关系，使通信初始化</li><li><strong>UPDATE（更新）报文</strong>：用来通告某一路由的信息，以及列出要撤销的多条路由</li><li><strong>KEEPALIVE（保洁）报文</strong>：用来周期性地证实邻站的连通性</li><li><strong>NOTIFICATION（通知）报文</strong>：用来发送检测到的差错</li></ul><h3 id="IPv4数据报的首部格式"><a href="#IPv4数据报的首部格式" class="headerlink" title="IPv4数据报的首部格式"></a>IPv4数据报的首部格式</h3><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20241201213159000.png" alt="image-20241201213159000"></p><ul><li>版本：4bit，表示IP协议的版本。常用的有IPv4和IPv6</li><li>首部长度：4bit，表示IP数据报首部的长度，该字段的取值以4字节为单位<ul><li>最小的十进制取值为5，表示IP数据报首部只有20字节固定部分</li><li>最大的十进制取值为15，表示IP数据报首部包含20字节固定部分和最大40字节可变部分</li></ul></li><li>可选字段：长度从1个字节到40个字节不等。用来支持排错，测量及安全等措施，但实际上很少会用到</li><li>填充字段：确保首部长度为4字节的整数倍，用0填充</li><li>区分服务：8bit，用来获得更好的服务，只有在使用区分服务的时候，该字段才起作用，一般不使用</li><li>总长度：16bit，表示IP数据报的总长度（首部+数据载荷）。最大取值为65535字节</li><li>标识：16bit，属于同一个数据报的各分片数据报应该具有相同的标识。IP软件维持一个计数器，每产生一个数据报，计数器值加1，并将此值赋给标识字段</li><li>标志：3bit，各比特含义如下：<ul><li>DF位：是否允许分片</li><li>MF位：后面是否有分片</li><li>保留位：必须为0</li></ul></li><li>片偏移：13bit，指出分片数据报的数据载荷部分偏移其在原数据报的位置有多少个单位，片偏移以8个字节为单位</li><li>生存时间TTL：8bit，表示IP数据报的生存时间。以“跳数”为单位，路由器转发IP数据报时，将IP数据报首部中的该字段的值减1，若不为0则转发，否则就丢弃。IP数据报每经过一个路由器，路由器就要重新计算首部检验和，因为某些字段（生存时间，标志，片偏移等）的取值可能发生变化</li><li>协议：8bit，指明IPv4数据报的数据部分是何种协议数据单元，常用的一些协议和相应的协议字段值如下：</li></ul><table><thead><tr><th>协议名称</th><th>ICMP</th><th>IGMP</th><th>TCP</th><th>UDP</th><th>IPv6</th><th>OSPF</th></tr></thead><tbody><tr><td>协议字段值</td><td>1</td><td>2</td><td>6</td><td>17</td><td>41</td><td>89</td></tr></tbody></table><ul><li>首部检测和：16bit，用来检测首部在传输过程中是否出现差错，比CRC检验码简单，称为因特网检验和。由于IP层本身并不提供可靠传输的服务，而且计算首部校验和是一项耗时的操作，<strong>因此在IPv6中，路由器不再计算首部校验和，从而更快地转发IP数据报</strong></li><li>源IP地址和目的IP地址：各32bit，用来填写发送该IP数据报地源主机地IP地址和接收该IP数据报的目的主机的IP地址</li></ul><h2 id="网络控制报文协议ICMP"><a href="#网络控制报文协议ICMP" class="headerlink" title="网络控制报文协议ICMP"></a>网络控制报文协议ICMP</h2><p>主机或路由器使用ICMP来发送<strong>差错报告报文</strong>和<strong>询问报文</strong>，<strong>ICMP报文被封装在IP数据报</strong>中发送</p><ul><li><p>ICMP差错报告报文共有以下5种：</p><ul><li><p>终点不可达：当IP数据包无法被发送给目的地址时</p></li><li><p>源点抑制：当路由器出现的网络拥堵情况时</p></li><li><p>时间超过：当TTL的值为0时会被丢弃时</p></li><li><p>参数问题：当发现首部在传输过程中出现了误码</p></li><li><p>改变路由（重定向）：当路由器发现发送端主机使用的不是最优的路径发送数据时，返回的消息中还会包含<strong>最适合的路由信息和数据源</strong></p></li></ul></li></ul><p>​以下情况<strong>不应发送</strong>ICMP差错报告报文：</p><ul><li>对ICMP差错报告报文不再发送ICMP差错报告报文</li><li>对第一个分片的数据报片的所有后续数据报片都不发送ICMP差错报告报文</li><li>对具有多播地址的数据报都不发送ICMP差错报告报文</li><li>对具有特殊地址（如127.0.0.0或0.0.0.0）的数据报不发送ICMP差错报告报文</li></ul><p>常用的<strong>ICMP询问报文</strong>有以下两种：</p><ul><li>回送请求和回答</li><li>时间戳请求和回答</li></ul><h2 id="虚拟专用网VPN与网络地址转换NAT"><a href="#虚拟专用网VPN与网络地址转换NAT" class="headerlink" title="虚拟专用网VPN与网络地址转换NAT"></a>虚拟专用网VPN与网络地址转换NAT</h2><ul><li>虚拟专用网VPN<ul><li><strong>利用公用的因特网作为本机构各专用网之间的通信载体</strong>，这样的专用网又称为虚拟专用网</li><li>同一机构内不同部门的内部网络所构成的虚拟专用网VPN又称为<strong>内联网VPN</strong></li><li>VPN要保证传输数据的安全性，会将原始的<strong>内部数据报进行加密</strong>，然后再将其封装成为在因特网上发送到外部数据报</li><li>有时一个机构的VPN需要有默写外部机构参加进来，这样的VPN就称为<strong>外联网VPN</strong></li><li>在外地工作的员工需要访问公司内部的专用网络时，只要在任何地点接入到因特网，运行驻留在员工PC中的VPN软件，在员工的PC和公司的主机之间建立VPN隧道，即可访问专用网络中的资源，这种VPN称为<strong>远程接入VPN</strong></li></ul></li><li>网络地址转换NAT<ul><li>虚拟专用网中的各主机所分配的地址应该是<strong>本机构可自由分配的专用地址</strong>，而不是需要申请的，在因特网上使用的公有地址</li><li>NAT能<strong>使大量使用内部专用地址的专用网络用户共享少量外部全球地址</strong>来访问因特网上的主机和资源</li><li>由于绝大多数的网络应用都是使用运输层协议的TCP或UDP来传送数据，因此可以<strong>利用运输层的端口号和IP地址一起进行转换</strong>。这样，用一个全球IP地址就可以使多个拥有本地地址的主机同时和因特网上的主机进行通信。这种将端口号和IP地址一起进行转换的技术叫作<strong>网络地址和端口号转换NAPT</strong></li><li>对于一些P2P网络应用，需要<strong>外网主机主动与内网主机进行通信，再通过NAT时会遇到问题</strong>，需要网络应用自己使用一些特殊的NAT穿越技术来解决问题</li><li>由于NAT对外网屏蔽了内网主机的网络地址，能为内网的主机提供一定的安全保证</li></ul></li></ul><h1 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h1><h2 id="运输层概述"><a href="#运输层概述" class="headerlink" title="运输层概述"></a>运输层概述</h2><p>物理层，数据链路层以及网络层解决了将主机通过异构网络互联起来所面临的问题，实现了主机到主机的通信。但实际上在计算机网络中进行通信的真正实体是<strong>位于通信两端主机中的进程</strong>。</p><p><strong>如何为运行在不同主机上的应用进程提供直接的通信服务</strong>是运输层的任务，运输层协议又称为<strong>端到端协议</strong>。运输层向高层用户屏蔽了下面网络核心的细节，它使应用进程看见的就<strong>好像是在两个运输层实体之间有一条端到端的逻辑通信信道</strong>。根据应用需求的不同，因特网的运输层为应用层提供了两种不同的运输协议，即<strong>面向连接的TCP和无连接的UDP</strong>。</p><h2 id="运输层端口号，复用与分用的概念"><a href="#运输层端口号，复用与分用的概念" class="headerlink" title="运输层端口号，复用与分用的概念"></a>运输层端口号，复用与分用的概念</h2><p>TCP&#x2F;IP体系的运输层使用端口号来区分应用层的不同应用进程，端口号使用16比特表示，范围为0-65535</p><ul><li>熟知端口号：0-1023，IANA把这些端口号指派给了TCP&#x2F;IP体系中最重要的一些应用协议。例如：FTP使用21&#x2F;20，HTTP使用80，DNS使用53</li><li>登记端口号：1024-49151，为没有熟知端口号的应用程序使用。使用这类端口号必须在IANA按照规定的手续登记，以防止重复。例如：Microsoft RDP 微软远程桌面使用的端口是3389</li><li>短暂端口号：49152-65535，留给客户进程选择暂时使用。当服务器进程收到客户进程的报文时，就知道了客户进程所使用的动态端口号。通信结束后，这个端口号可供其他客户进程以后使用</li></ul><p><strong>端口号只具有本地意义</strong>，即端口号只是为了<strong>标识本计算机应用层中的各进程</strong>，在因特网中，不同计算机中的相同端口号是没有任何联系的</p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20241202195235463.png" alt="image-20241202195235463"></p><h2 id="UDP和TCP的对比"><a href="#UDP和TCP的对比" class="headerlink" title="UDP和TCP的对比"></a>UDP和TCP的对比</h2><table><thead><tr><th>用户数据报协议UDP</th><th>传输控制协议TCP</th></tr></thead><tbody><tr><td>无连接</td><td>面向连接</td></tr><tr><td>支持一对一，一对多，多对一和多对多交互通信</td><td>每一条TCP连接只能有两个端点EP，只能是一对一通信</td></tr><tr><td>对应用层交付的报文直接打包</td><td>面向字节流</td></tr><tr><td>尽最大努力交付，也就是不可靠；不使用流量控制和拥塞控制</td><td>可靠传输，使用流量控制和拥塞控制</td></tr><tr><td>首部开销小，仅8字节</td><td>首部最小20字节，最大60字节</td></tr></tbody></table><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><h3 id="TCP的流量控制"><a href="#TCP的流量控制" class="headerlink" title="TCP的流量控制"></a>TCP的流量控制</h3><p>一般来说，我们总是希望数据传输得更快一些，如果发送方把数据发送得过快，接收方就可能来不及接收，这就会造成数据的丢失。</p><p>所谓流量控制就是<strong>让发送方的发送速率不要太快，要让接收方来得及接收</strong>。</p><p>利用<strong>滑动窗口</strong>机制可以很方便地在TCP连接上实现对发送方的流量控制：</p><ul><li>TCP接收方利用自己的<strong>接收窗口</strong>的大小来限制发送方<strong>发送窗口</strong>的大小</li><li>TCP发送方收到接收方的<strong>零窗口通知</strong>后，应启动<strong>持续计时器</strong>。持续计时器超时后，向接收方发送<strong>零窗口探测报文</strong></li></ul><h3 id="TCP的拥塞控制"><a href="#TCP的拥塞控制" class="headerlink" title="TCP的拥塞控制"></a>TCP的拥塞控制</h3><p>在某段时间，若<strong>对网络中某一资源的需求超过了该资源所能提供的可用部分，网络性能就要变坏</strong>。这种情况就叫做<strong>拥塞</strong>。（在计算机网络中的链路容量，即宽带，交换结点中的缓存和处理机等，都是网络的资源）</p><p>若出现拥塞而不进行控制，整个网络的吞吐量将随入负荷的增大而下降</p><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20241202203738415.png" alt="image-20241202203738415"></p><p>发送方维护一个叫做拥塞窗口<strong>cwnd</strong>的状态变量，其值取决于网络的拥塞程度，并且动态变化</p><ul><li>拥塞窗口cwnd的维护原则：只要网络没有出现拥塞，拥塞窗口就再增大一些；但只要网络出现拥塞，拥塞窗口就减少一些。</li><li>判断出现网络拥塞的依据：没有按照收到应当到达的确认报文（即发生超时重传）</li></ul><p>维护一个慢开始门限<strong>ssthresh</strong>状态变量：</p><ul><li>当cwnd &lt; ssthresh时，使用慢开始算法</li><li>当cwnd &gt; ssthresh时，停止使用慢开始算法而改用拥塞避免算法</li></ul><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20241202203413221.png" alt="image-20241202203413221"></p><ul><li><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20241202204615692.png" alt="image-20241202204551300"></li></ul><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20241202204620118.png" alt="image-20241202204620118"></p><h3 id="TCP超时重传时间的选择"><a href="#TCP超时重传时间的选择" class="headerlink" title="TCP超时重传时间的选择"></a>TCP超时重传时间的选择</h3><p>使用下式计算超时重传时间RTO</p><p><strong>RTO &#x3D; RTT<del>S</del>+ 4 * RTT<del>D</del></strong></p><ul><li>加权平均往返时间RTT<del>S</del>：</li></ul><p>RTT<del>S1</del> &#x3D; RTT<del>1</del></p><p>新的RTT<del>S</del> &#x3D; （1 - α）* 旧的RTT<del>S</del> + α * 新的RTT<del>S</del>   （ 0 &lt;&#x3D; α &lt; 1）</p><p>α值为1&#x2F;8，即0.125</p><ul><li>RTT偏差的加权平均RTT<del>D</del></li></ul><p>RTT<del>D1</del> &#x3D; RTT<del>1</del> &#x2F; 2</p><p>新的RTT<del>D</del> &#x3D; （ 1 - β）* 旧的RTT<del>D</del> + β * |RTT<del>S</del> - 新的RTT样本|     （0 &lt;&#x3D; β &lt; 1）</p><p>β值为1&#x2F;4，即0.25</p><p><strong>当出现超时重传时，新RTO &#x3D; 2 * 旧的RTO</strong></p><h3 id="TCP可靠传输的实现"><a href="#TCP可靠传输的实现" class="headerlink" title="TCP可靠传输的实现"></a>TCP可靠传输的实现</h3><ul><li>TCP基于<strong>以字节为单位的滑动窗口</strong>来实现可靠传输<ul><li>发送方在未收到接受反对个确认时，可将发送窗口内还未发送的数据全部发送出去</li><li>接收方只接收序号落入发送窗口内的数据</li></ul></li><li>虽然发送方的发送窗口是根据接收方的接收窗口设置的，但在同一时刻，<strong>发送方的发送窗口并不总是和接收方的接收窗口</strong>一样大<ul><li>网络传送窗口值需要经历一定的时间滞后，并且整个时间还是不确定的</li><li>发送方还可能根据网络当时的拥塞情况适当减少自己的发送窗口尺寸</li></ul></li><li>对于<strong>不按序到达的数据应如何处理</strong>，TCP并无明确规定<ul><li>如果接收方把不按序到达的数据一律丢弃，那么接收窗口的管理将会比较简单，但这样做对网络资源的利用不利，因为发送方会重复传送较多的数据</li><li>TCP通常对不按序到达的数据是先临时存放咋接收窗口中，等到字节流中所缺少的字节收到后，再按序交付上层的应用进程</li></ul></li><li>TCP要求接收方必须有<strong>累计确认和捎带确认机制</strong>，这样可以减少传输开销。接收方可以在合适的时候发送确认，也可以在自己有数据要发送时把确认信息顺便捎带上<ul><li>接收方不应该过分推迟发送确认，否则会导致发送方不必要的超时重传，这反而浪费了网络的资源。TCP标准规定，确认推迟的时间不应超过0.5秒，若收到一连串具有最大长度的报文段，则必须每隔一个报文段就发送一个确认</li><li>捎带确认实际上并不经常发生，因为大多数应用程序很少同时在两个方向上发送数据</li></ul></li><li>TCP的通信是<strong>全双工通信</strong>。通信中的每一方都在发送和接收报文段。因此，每一方都有自己的发送窗口和接收窗口。</li></ul><h3 id="TCP的运输连接管理"><a href="#TCP的运输连接管理" class="headerlink" title="TCP的运输连接管理"></a>TCP的运输连接管理</h3><h4 id="TCP的连接建立"><a href="#TCP的连接建立" class="headerlink" title="TCP的连接建立"></a>TCP的连接建立</h4><p>TCP的连接建立要解决以下三个问题：</p><ul><li>使TCP双方能够确知对方的存在</li><li>使TCP双方能够协商一些参数（如最大窗口值，是否使用窗口扩大选项和时间戳选项以及服务质量等）</li><li>使TCP双方能够对运输实体资源（如缓存大小，连接表中的项目等）进行分配</li></ul><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20241202212639859.png" alt="image-20241202212639859"></p><h4 id="TCP的连接释放"><a href="#TCP的连接释放" class="headerlink" title="TCP的连接释放"></a>TCP的连接释放</h4><p><img src="/2024/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20241202213424358.png" alt="image-20241202213424358"></p><p>当客户端出现故障的时候，服务端如何发现：</p><ul><li>TCP服务器进程每收到一次TCP客户进程的数据，就重新设置并启动<strong>保活计时器</strong>（2h定时）</li><li>若保活计时器定时周期内未收到TCP客户进程发来的数据，则<strong>当保活计时器到时后，TCP服务器进程就像TCP客户进程发送一个探测报文段</strong>，以后则每隔75秒种发送一次。若一连发送10个探测报文段后仍无TCP客户进程的相应，TCP服务器进程就认为TCP客户进程所在主机出现了故障，接着就关闭这个连接</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo图片插入失败的解决方法</title>
      <link href="/2024/07/17/hexo%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2024/07/17/hexo%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>本人根据<a href="https://hexo.io/zh-cn/docs/asset-folders">hexo官方文档</a>来解决问题。</p><ol><li><p>在博客所在文件夹的目录中找到_config.yml,并将文件中的post_asset_folder选项设置为true来打开。</p><p><img src="/2024/07/17/hexo%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/Snipaste_2024-07-17_19-16-04.png"></p></li></ol><p>根据官方文档的介绍，在资源文件管理功能打开以后，hexo将会在每一次通过<em>hexo new title</em>命令创建新文章时自动创建一个与文章同名的文件夹，将所有与文章有关的资源都会被放在这个文件夹中，方便后续的管理。</p><ol start="2"><li><p>官方文档提供了两种方法，我这里采用了第二种方法，感兴趣的也可以去官方文档看看第一种方法。下载hexo-renderer-marked插件，这个可以直接在markdown中嵌入图片。</p><p>在博客文件夹下打开终端输入</p><p><code>npm install hexo-renderer-marked --save</code></p><p>如果速度很慢，导致无法下载的情况，可以选择配置路径为taobao的免费registry：</p><p><code>npm config set registry https://r*egistry.npm.taobao.org</code></p><p>配置后可通过下面方式来验证时候成功</p><p><code>npm config get registry</code>或者<code>npm info express</code></p><p>然后还是在_config.yml中修改：</p><p><img src="/2024/07/17/hexo%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/Snipaste_2024-07-17_20-14-17.png"></p><p>启用后，资源图片将会被自动解析为其对应文章的路径。 例如： <code>image.jpg</code> 位置为 <code>/2020/01/02/foo/image.jpg</code> ，这表示它是 <code>/2020/01/02/foo/</code> 文章的一张资源图片， <code>![](image.jpg)</code> 将会被解析为 <code>&lt;img src=&quot;/2020/01/02/foo/image.jpg&quot;&gt;</code> 。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git工作流</title>
      <link href="/2024/07/15/git%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
      <url>/2024/07/15/git%E5%B7%A5%E4%BD%9C%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="git工作流"><a href="#git工作流" class="headerlink" title="git工作流"></a>git工作流</h1><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p><img src="/2024/07/15/git%E5%B7%A5%E4%BD%9C%E6%B5%81/9F1E3D17081CF96E94899DEC388C8A98.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建博客</title>
      <link href="/2024/03/30/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/03/30/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="博客搭建过程"><a href="#博客搭建过程" class="headerlink" title="博客搭建过程"></a>博客搭建过程</h1><h2 id="安装前的准备"><a href="#安装前的准备" class="headerlink" title="安装前的准备"></a>安装前的准备</h2><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>以下所有的命令没有特别说明都可以在cmd或者powershell中运行，如果无法运行请使用管理员模式进行</p><h3 id="下载并安装node-js"><a href="#下载并安装node-js" class="headerlink" title="下载并安装node.js"></a>下载并安装node.js</h3><ul><li>官网下载:<a href="https://nodejs.org/en/download">https://nodejs.org/en/download</a></li><li>安装后l验证:<code>node -v</code></li></ul><h3 id="下载并安装git"><a href="#下载并安装git" class="headerlink" title="下载并安装git"></a>下载并安装git</h3><ul><li>官网下载:<a href="https://git-scm.com/download">https://git-scm.com/download</a></li><li>安装后验证:<code>git -v</code></li></ul><h3 id="命令行安装cnpm"><a href="#命令行安装cnpm" class="headerlink" title="命令行安装cnpm"></a>命令行安装cnpm</h3><ul><li>命令: <code>npm install -g cnpm --registry==https://registry.npm.taobao.org </code>(使用的淘宝源，速度快一点)</li><li>安装后验证：<code>cnpm -v</code></li></ul><h3 id="命令行安装hexo"><a href="#命令行安装hexo" class="headerlink" title="命令行安装hexo"></a>命令行安装hexo</h3><ul><li>命令：<code>cnpm install -g hexo-cli</code></li><li>安装后验证 : <code>hexo -v</code></li></ul><h1 id="配置github"><a href="#配置github" class="headerlink" title="配置github"></a>配置github</h1><h2 id="在github上创建仓库"><a href="#在github上创建仓库" class="headerlink" title="在github上创建仓库"></a>在github上创建仓库</h2><p><strong>创建</strong></p><ul><li><p>创建一个名为：[你的用户名].github.io的仓库(创建的时候中括号去掉)</p></li><li><p>例如：假如你的名字叫love，那么这个仓库应该叫love.github.io。创建之后，你就可以通过这个网站来访问你的博客。因此，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库</p><p><img src="/2024/03/30/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20240330183243122.png" alt="image-20240330183243122"></p></li></ul><p>（可见我这里已经无法再创建第二个了）</p><p><strong>其中选择public还是private其实都可以</strong></p><p><strong>仓库的名字必须是[username].github.io,其中username是你的用户名</strong></p><h1 id="配置SSH免密登录"><a href="#配置SSH免密登录" class="headerlink" title="配置SSH免密登录"></a>配置SSH免密登录</h1><p>为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，如果不配置你每次上传github都要输入你的密码，这太烦琐了，所以我们使用ssh key来解决本地和服务器链接问题。</p><p>操作步骤：</p><ol><li><p>打开文件资源管理器，找到c:\users\你的用户名\.ssh 文件夹并删除，如果没有找到那就直接下一步</p></li><li><p>命令行输入: <code>ssh-keygen -t rsa</code></p></li><li><p>然后连按回车键，知道提示已经生成</p></li><li><p>一般来说在创建的时候命令行会提示你密钥文件的路径，Windows一般是C:\Users\Administrator.ssh</p><p>然后用记事本打开id_rsa.pub文件并复制其中的内容备用。</p></li><li><p>打开你的github主页，进入settings ——&gt; SSH and GPG keys ,然后点击New SSH key新建一个，之后把先前复制的内容粘贴到里面，Title随便起一个。</p></li></ol><p>设置好之后如下图所示：</p><p><img src="/2024/03/30/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/Snipaste_2024-03-30_20-25-05-1721213237958-3.png"></p><h1 id="使用hexo搭建博客"><a href="#使用hexo搭建博客" class="headerlink" title="使用hexo搭建博客"></a>使用hexo搭建博客</h1><p><strong>终于进入正题了！</strong></p><h2 id="进行初始化"><a href="#进行初始化" class="headerlink" title="进行初始化"></a>进行初始化</h2><ol><li>在电脑的任意地方新建一个文件夹，名字随意，认识就行，比如我起的就是blog，这个文件夹还蛮重要的，不要随意乱放，要是实在不放心，可以和我一样将其设置为快速访问</li></ol><p><img src="/2024/03/30/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20240330203205949-1721213275794-6.png"></p><ol start="2"><li>在blog文件夹下右键打开powershell，输入<code>hexo init</code>初始化。使用之后，会自动下载许多文件。</li><li>执行<code>hexo g #生成</code>  </li><li>执行<code>hexo s #启动本地预览</code></li><li>然后打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> 即可看到内容</li></ol><p>这样，hexo的初始化设置就完成了，很简单，对吧。</p><h2 id="将博客部署到github个人主页上"><a href="#将博客部署到github个人主页上" class="headerlink" title="将博客部署到github个人主页上"></a>将博客部署到github个人主页上</h2><ol><li><p>在blog文件夹下右键打开powershell，执行安装命令<code>npm install hexo-deployer-git --save</code></p></li><li><p>打开在blog文件夹目录下的_config.yml文件，在文件的结尾加上如下的内容：</p><p><strong>注意：yaml文件的格式要求非常严格，注意在冒号后要加一个空格，否则会报错。同时，缩进不正确也会导致文件的报错，请务必检查文件的缩进</strong></p><p><img src="/2024/03/30/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/image-20240330204031324-1721213311897-9.png"></p></li></ol><p>其中repository中的内容就是你的仓库地址，具体看下图：</p><p><img src="/2024/03/30/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/Snipaste_2024-03-30_20-42-20-1721213347685-14.png"></p><ol start="3"><li>在blog文件夹下右键打开powershell，执行<code>hexo d #将本地的blog推送到github仓库，期间可能有几分钟的延迟，请耐心等待捏</code></li><li>推送成功后，在浏览器输入对应的域名，即可访问你的博客啦！</li></ol><h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><h2 id="寻找主题"><a href="#寻找主题" class="headerlink" title="寻找主题"></a>寻找主题</h2><ul><li>默认的主题很丑对吧，那我们在写文章之前可以先来找一找好看的主题装饰一下我们的博客</li><li>可以进入hexo的官网：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a> 来找主题下载</li><li>这里我贴一下我使用的主题 <a href="https://github.com/jerryc127/hexo-theme-butterfly">butterfly</a></li></ul><h2 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h2><ul><li>在blog文件夹里执行：<code>git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</code>或者<code>git clone -b master https://gitee.com/immyw/hexo-theme-butterfly.git themes/butterfly</code>（如果第一个下的太慢了就用第二个）</li><li>可以进入blog文件夹下的themes文件夹来检查主题是否安装成功</li></ul><p><img src="/2024/03/30/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/Snipaste_2024-03-30_21-01-17-1721213379728-17.png"></p><h2 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h2><ul><li><p>打开blog文件夹下的_config.yml文件，在里面找到theme:landscape改为theme:butterfly(butterfly是我们使用的主题)</p><p><img src="/2024/03/30/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/Snipaste_2024-03-30_21-03-32.png"></p></li><li><p>然后分别在blog文件夹下执行1. <code>hexo clean #清理缓存，以免出现莫名其妙的问题</code>2.<code>hexo g </code>3. <code>hexo s </code>4.<code>hexo d #最好先用hexo s在本地预览，没问题后再推到仓库</code></p></li><li><p>此时输入网址应该就可以看到更改后的内容了</p></li></ul><h1 id="简单更改"><a href="#简单更改" class="headerlink" title="简单更改"></a>简单更改</h1><h2 id="基础修改"><a href="#基础修改" class="headerlink" title="基础修改"></a>基础修改</h2><ul><li><p>打开blog文件夹下的_config.yml</p></li><li><p>其中title指的是你的博客名字，author指的是作者名字</p></li><li><p>language中改成<code>zh-CN</code>就可以将网站改成中文了</p><p><img src="/2024/03/30/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/Snipaste_2024-03-30_21-09-06-1721213424016-23.png"></p></li></ul><h2 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h2><p>这里贴一下主题作者关于主题配置的博客，完全可以按照作者的攻略博客来美化你的博客:<a href="https://butterfly.js.org/posts/21cfbf15/">butterfly安装文档</a>，我就是按照作者的博客来进行美化的。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这是本人搭建博客的过程，整个过程应该不会有太大的问题，如若遇到任何问题，请先去bing一下，寻找解决办法，如果没法解决，欢迎留言我们一起解决。最后，感谢你的阅读，谢谢捏！</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
